<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WPFCustomControls</name>
    </assembly>
    <members>
        <member name="T:WPFCustomControls.ActionItemExtension">
            <exclude/>
            <summary>
            Markup Extension to provide an MaxActionItemCommand command handler around a 
            native ActionItem from Max.
            </summary>
            <remarks>
            <para>
            Given of the following property pairs: TableId and ActionId, ActionName and 
            GroupName, or MacroName and MacroCategory, ActionItemExtension.ProvideValue
            will look up the native ActionItem associated with those keys, then
            return the ActionItem wrapped in a MaxActionItemCommand.
            </para>
            <para>
            Example XAML attribute usage:
            <code>
            &lt;ApplicationMenuItem Text="New All"
              CommandHandler="{wpfmax:ActionItem TableId=0, ActionId=13}"/&gt;
            </code>
            With string properties:
            <code>
            &lt;ApplicationMenuItem Text="Export to DWF"
              CommandHandler="{wpfmax:ActionItem MacroCategory=File, MacroName=Publish_To_DWF}"/&gt;
            </code>
            </para>
            <para>
            Note that XAML Markup Extension syntax automatically applies "Extension" to
            a markup extension's name, allowing us to refer to ActionItemExtension as
            "ActionItem."
            </para>
            </remarks>
        </member>
        <member name="M:WPFCustomControls.ActionItemExtension.ProvideValue(System.IServiceProvider)">
            <exclude/>
            <summary>
            Construct a MaxActionItemCommand around the ActionItem specified by
            the given properties.
            </summary>
            <param name="serviceProvider">
            Provides services for the markup extension.
            </param>
            <returns>
            A MaxActionItemCommand around the ActionItem specified by
            the given properties.
            </returns>
            <exception cref="T:System.ArgumentException">
            One of the following pairs is not set: TableId and ActionId, ActionName 
            and GroupName, or MacroName and MacroCategory, or the Action Item is not 
            found.
            </exception>
        </member>
        <member name="M:WPFCustomControls.ActionItemExtension.ResolveActionItem">
            <exclude/>
            <summary>
            Look up the Action Item specified by the given properties.
            </summary>
            <returns>
            The specified Action Item.
            </returns>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.ActionId">
            <exclude/>
            <summary>
            Action Item Id key within the Action Table specified by Table Id.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.TableId">
            <exclude/>
            <summary>
            Id key used to look up an Action Table.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.ActionName">
            <exclude/>
            <summary>
            CUI name used as a search key within the Action Table specified by 
            GroupName.
            </summary>
            <remarks>
            Note that using TableId and ActionId is preferred over ActionName and GroupName. 
            The Ids are more efficient and more portable for localized builds.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.GroupName">
            <exclude/>
            <summary>
            CUI Group Name describing an Action Table.  Used a search key to find
            an Action Table.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.MacroName">
            <exclude/>
            <summary>
            Specifies a function name within a Macro category for Maxscript Macro
            Script Action Items.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemExtension.MacroCategory">
            <exclude/>
            <summary>
            Specifies a Macro category for Maxscript Macro Script Action Items.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ApplicationExplicit">
            <summary>
            Acts as an entry point for the assembly, not it's not run automatically.  The application calls this method 
            explicitly to initialize ResourceDictionaries into the Application object's top-level dictionary.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ApplicationExplicit.SetupResourceDictionaries">
            <summary>
            Called explicitly by 3ds Max to load this assemblies Resource Dictionaries into the current Application's
            top-level dictionary.
            </summary>
            <remarks>
            Because a root Application object does not agree with OpenGL mode in Max, we don't want to create and assign these resources to it.
            If we were to ever dismiss OpenGL as a valid viewport rendering mode, then we could consider going back to an Application model for 
            propogating styles.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.ApplicationExplicit.LoadResourcesIntoApplication(System.Uri)">
            <summary>
            Will add a ResourceDictionary pointed to by the parameter into the top-level Application Dictionary.
            </summary>
            <remarks>
            Note that no checking is performed on the validity of the parameter.  If the param is null or does not
            point to a valid ResourceDictionary, this call will fail and through an exception.
            NOTE: Because a root Application object does not agree with OpenGL mode in Max, we don't want to create and assign these resources to it.
            If we were to ever dismiss OpenGL as a valid viewport rendering mode, then we could consider going back to an Application model for 
            propogating styles.
            </remarks>
            <param name="resourceLocation">A Uri pointing a valid ResourceDictionary.</param>
            <see cref="M:System.Windows.Application.LoadComponent(System.Uri)"/>
        </member>
        <member name="T:WPFCustomControls.ColorSwatch">
            <summary>
            UserControl for selecting a Color. Shows the current selected Color as the
            swatch. Opens Max's native ColorPicker when clicked.
            </summary>
            <summary>
            ColorSwatch
            </summary>
        </member>
        <member name="M:WPFCustomControls.ColorSwatch.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:WPFCustomControls.ColorSwatch.ColorProperty">
            <summary>
            The current selected Color.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ColorSwatch.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.ColorSwatch.Color">
            <summary>
            The current selected Color.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ColorSwatch.ImmediateUpdate">
            <summary>
            Controls whether the Color property is immediately updated as the user
            changes the current color in the color picker. Default is true.
            </summary>
            <remarks>
            <para>
            If true, changes to the current selected color in the color picker are 
            immediately reflected in the Color property and propagated through
            DataBindings. On Cancel, the original color before the color picker was
            opened is restored.
            </para>
            <para>
            If false, the Color property is only updated when the user clicks Ok
            on the color picker dialog.
            </para>
            </remarks>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.ContextQuery">
            <summary>
            Base class for performing a Boolean query on the state of the scene.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.Clone">
            <summary>
            Create a copy of this instance.
            </summary>
            <returns>
            A new object, copied from this instance.
            </returns>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.OnContextDefinitionChanged">
            <summary>
            Triggers a ContextDefinitionChanged event.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.FireContextDefinitionChangedOnEvent(System.Object,System.EventArgs)">
            <summary>
            Convenience event handler definition.  Fires a ContextDefinitionChanged
            event as a response to any incoming event.
            </summary>
            <param name="sender">The source of the original event.</param>
            <param name="e">Information about the original event.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.FireContextDefinitionChangedOnEvent(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Convenience event handler definition.  Fires a ContextDefinitionChanged
            event as a response to any incoming event.
            </summary>
            <param name="sender">The source of the original event.</param>
            <param name="e">Information about the original event.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.GetDefaultInternalName">
            <summary>
            Get the default value used for the give class's InternalName. 
            Defaults to the class's name, unless this instance is a shared singleton,
            in which case the default name is the class name + ".Instance"
            </summary>
            <return>Default value used for this class's InternalName</return>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.ContextQuery.InternalNameProperty">
            <summary>
            This query's internal name, used programmatically as an identifier.
            </summary>
            <remarks>
            ContextQueries with the same name should perform the same test.  For
            many queries, this allows us to update the query's result only once
            instead of running the same test repeatedly.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.ContextQuery.ValueProperty">
            <summary>
            This query's current value, as of the last time it was refreshed.
            </summary>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.ContextQuery.LabelProperty">
            <summary>
            Localized Label representing this Context Query's condition.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.RefreshValueOnEvent(System.Object,System.EventArgs)">
            <summary>
            Convenience event handler.  Attach to any event to have this query refresh
            its current value whenever the event fires.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ContextQuery.RefreshValueOnEvent(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Convenience event handler for DependencyProperty change events.  
            Attach to any DependencyProperty change event to have this query refresh
            its current value whenever the event fires.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.ContextQuery.SharedInstance">
            <summary>
            Indicates if this ContextQuery uses a shared singleton instance.
            </summary>
            <remarks>
            False by default.
            </remarks>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.ContextQuery.ContextDefinitionChanged">
            <summary>
            Occurs when this query changes in such a way that the context it
            recognizes changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.ContextQuery.InternalName">
            <summary>
            This query's internal name, used programmatically as an identifier.
            </summary>
            <remarks>
            ContextQueries with the same name should perform the same test.  For
            many queries, this allows us to update the query's result only once
            instead of running the same test repeatedly.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.ContextQuery.Value">
            <summary>
            This query's current value, as of the last time it was refreshed.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.ContextQuery.Label">
            <summary>
            Localized Label representing this Context Query's condition.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.ActionItemIsCheckedContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.EditSlicePlaneEnabledContextQuery">
            <summary>
            Evaluates to true when Edit Geometry is set to "Slice Plane"
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SharedMaxscriptContextQuery">
            <summary>
            A shared maxscript query - overrides SharedInstance, Clone and 
            ContextDefinitionChanged and provides an appropriate default 
            implementation for these members.
            </summary>
            <remarks>
            The query must still provide a Singleton access point.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.MaxscriptContextQuery">
            <summary>
            Executes maxscript code to perform a Boolean query on the current scene state.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MaxscriptContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MaxscriptContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.MaxscriptContextQuery.MaxscriptProperty">
            <summary>
            Maxscript executed when this ContextQuery is evaluated.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MaxscriptContextQuery.RefreshValue">
            <summary>
            Overridden to evaluate the Maxscript and set its result as the 
            current Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.MaxscriptContextQuery.Maxscript">
            <summary>
            Maxscript executed when this ContextQuery is evaluated.
            </summary>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.MaxscriptContextQuery.MaxscriptChanged">
            <summary>
            Fires when the Maxscript changes.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SharedMaxscriptContextQuery.Clone">
            <summary>
            Since these queries can be shared, fake out clone, by simply returning this.
            </summary>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.SharedMaxscriptContextQuery.ContextDefinitionChanged">
            <summary>
            This context must never change, and is kept as a singleton instance. 
            Avoid leaking event listeners by never attaching them. 
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SharedMaxscriptContextQuery.SharedInstance">
            <summary>
            This is a shared singleton query.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.EditSlicePlaneEnabledContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.EditSlicePlaneEnabledContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.LayoutContextQuery">
            <summary>
            Evaluates the given panel and the ribbon's current orientation and 
            autohide mode, comparing against the list of registered valid states.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.RibbonPanelContextQuery">
            <summary>
            Intermediate abstract base class for ContextQueries that query a RibbonPanel
            for some property.  It is up to the derived class to determine which property
            to query on the RibbonPanel and how to use it.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            Note that the Panel is copied by reference, and not cloned.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.PanelProperty">
            <summary>
            RibbonPanel to query.
            </summary>   
        </member>
        <member name="M:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.ResolvePanelByUid">
            <summary>
            Find the RibbonPanel identified by PanelUid within the Ribbon and set it
            as the Panel property value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.Panel">
            <summary>
            RibbonPanel to query.
            </summary>   
        </member>
        <member name="P:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.PanelUid">
            <summary>
            Unique identifier used to find the Panel.
            </summary>
            <remarks>
            PanelUid may be used for serialization.  A RibbonPanelContextQuery
            can be constructed using a Uid to identify the relevant Panel instead of
            assigning the Panel instance directly.  When ResolvePanelByUid is called,
            this RibbonPanelContextQuery will search the Ribbon to find the 
            RibbonPanel identified by this Uid.
            </remarks>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.RibbonPanelContextQuery.PanelChanged">
            <summary>
            Occurs when this query's relevant panel changes.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.LayoutContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.LayoutContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.LayoutContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.LayoutContextQuery.ValidAutoHideModes">
            <summary>
            List of valid autohide modes which the Panel or Ribbon must match.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.LayoutContextQuery.ValidAutoHideModesString">
            <summary>
            ValidAutoHideModes serialized as a comma-separated list.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.LayoutContextQuery.ValidOrientations">
            <summary>
            List of valid orientations which the Panel or Ribbon must match.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.LayoutContextQuery.ValidOrientationsString">
            <summary>
            ValidOrientations serialized as a comma-separated list.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.NurmsEnabledContextQuery">
            <summary>
            Evaluates to true when the current object has NURMS Subdivision enabled.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.NurmsEnabledContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.NurmsEnabledContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SharedContextQuery">
            <summary>
            A shared query - overrides SharedInstance, Clone and ContextDefinitionChanged and
            provides an appropriate default implementation for these members.
            </summary>
            <remarks>
            The query must still provide a Singleton access point.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SharedContextQuery.Clone">
            <summary>
            Since these queries can be shared, fake out clone, by simply returning this.
            </summary>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.SharedContextQuery.ContextDefinitionChanged">
            <summary>
            This context must never change, and is kept as a singleton instance. 
            Avoid leaking event listeners by never attaching them. 
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SharedContextQuery.SharedInstance">
            <summary>
            This is a shared singleton query.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditablePolyObjectSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Editable Poly object.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditablePolyObjectSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditablePolyObjectSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditableSplineObjectSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Editable Spline or Line object.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditableSplineObjectSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditableSplineObjectSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditableMeshObjectSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Editable Mesh object.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditableMeshObjectSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditableMeshObjectSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditablePatchObjectSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Editable Patch object.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditablePatchObjectSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditablePatchObjectSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditPolyModifierSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Editable Poly object.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditPolyModifierSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditPolyModifierSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditSplineModifierSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Edit Spline modifier.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditSplineModifierSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditSplineModifierSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditMeshModifierSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Edit Mesh modifier.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditMeshModifierSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditMeshModifierSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SingleEditPatchModifierSelectedContextQuery">
            <summary>
            Evaluates to true when the current scene and modifier stack selection is
            a single Edit Patch modifier.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SingleEditPatchModifierSelectedContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SingleEditPatchModifierSelectedContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SubdivisionDisplacementEnabledContextQuery">
            <summary>
            Evaluates to true when Subdivision Displacement is enabled.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SubdivisionDisplacementEnabledContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubdivisionDisplacementEnabledContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SubObjectContextQuery">
            <summary>
            Queries whether the currently selected object's sub-object mode matches
            the given expected mode.
            </summary>
            <remarks>
            Once initialized and put into use, these queries expect to remain immutable.
            Clone and ContextDefinitionChanged events assume that the expected sub object
            mode will not change.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.SubObjectContextQuery.ExpectedSubObjectModePropertyName">
            <summary>
            Constant name identifying the ExpectedSubObjectModeProperty.
            </summary>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.SubObjectContextQuery.ExpectedSubObjectModeProperty">
            <summary>
            Sub-object mode to compare against the current selected object's 
            sub-object mode.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SubObjectContextQuery.RefreshValue">
            <summary>
            Reevaluate this query for the current state of the scene, setting the
            new result in Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.ExpectedSubObjectMode">
            <summary>
            Sub-object mode to compare against the current selected object's 
            sub-object mode.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.ObjectModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Object.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.VertexModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Vertex.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.EdgeModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Edge.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.BorderModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Border.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.PolygonModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Polygon.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SubObjectContextQuery.ElementModeContextQuery">
            <summary>
            SubObjectContextQuery evaluating to true when the current sub-object mode
            is 'Element.'
            </summary>
            <remarks>
            Using this single instance instead of constructing a new one improves 
            performance by evaluating the query only once.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.TweakUvwEnabledContextQuery">
            <summary>
            Evaluates to true when PolyTools Tweak UVW Mode is Enabled
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.TweakUvwEnabledContextQuery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.TweakUvwEnabledContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.BindingDebuggingConverter">
            <exclude />
            <summary>
            This is not a real converter, but rather a useful stand-in to help you debug
            a binding.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.BooleanMappingConverter">
            <summary>
            Maps Object Equality to Boolean values.
            </summary>
            <remarks>
            <para>
            Detects the targetType for each conversion to map from Boolean to Object 
            instances, or from Object Equality to Boolean. When converting to Boolean,
            returns true if the current value Equals the expected True object, and
            returns false otherwise. When converting from Boolean, returns the mapped 
            BooleanMappingConverter.True value for true, and BooleanMappingConverter.False
            for false.
            </para>
            <para>
            BooleanMappingConverter may be used in XAML as a MarkupExtension, but note 
            that every MarkupExtension use site constructs a new instance. In a scenario
            such as a DataTemplate where True and False use common values across all 
            template instances, it would be more efficient to use a shared instance
            as a StaticResource. Assuming 
            xmlns:converters="clr-namespace:WPFCustomControls.Converters;assembly=WPFCustomControls",
            the MarkupExtension usage would resemble:
            <code>
            {converters:BooleanMappingConverter True=Colors.Red, False=Colors.Blue}
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:WPFCustomControls.Converters.BooleanMappingConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements MarkupExtension to return this instance.
            </summary>
            <param name="serviceProvider">Igoned.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.BooleanMappingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to or from a Boolean value.
            </summary>
            <remarks>
            <para>
            Behavior depends on the targetType.
            </para>
            <para>
            If targetType is bool, converts to Boolean by comparing value against 
            the BooleanMappingConverter.True property. Returns the 
            BooleanMappingConverter.True.Equals(value).
            </para>
            <para>For any other targetType, value is expected to be a bool value.
            If value is true, returns the BooleanMappingConverter.True property value.
            If value is false, returns the BooleanMappingConverter.False property value.
            If the cast to bool fails, returns DependencyProperty.UnsetValue.
            </para>
            </remarks>
            <param name="value">Value from which to convert, see Remarks.</param>
            <param name="targetType">Expected result type, see Remarks.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.BooleanMappingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to or from a Boolean value.
            </summary>
            <remarks>
            <para>
            Behavior depends on the targetType.
            </para>
            <para>
            If targetType is bool, converts to Boolean by comparing value against 
            the BooleanMappingConverter.True property. Returns the 
            BooleanMappingConverter.True.Equals(value).
            </para>
            <para>For any other targetType, value is expected to be a bool value.
            If value is true, returns the BooleanMappingConverter.True property value.
            If value is false, returns the BooleanMappingConverter.False property value.
            If the cast to bool fails, returns DependencyProperty.UnsetValue.
            </para>
            </remarks>
            <param name="value">Value from which to convert, see Remarks.</param>
            <param name="targetType">Expected result type, see Remarks.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="P:WPFCustomControls.Converters.BooleanMappingConverter.True">
            <summary>
            Expected comparison value when converting to Boolean, value returned when
            converting from a Boolean true value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Converters.BooleanMappingConverter.False">
            <summary>
            Value returned when converting from a Boolean false value.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.FileNameConverter">
            <summary>
            Converts a path to just the filename component.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Converters.FileNameConverter.Converter">
            <summary>
            Shared instance.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.FileNameConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Return the shared instance. Supports MarkupExtension interface.
            </summary>
            <param name="serviceProvider">Ignored.</param>
            <returns>The Converter shared instance.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.FileNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a path to just its filename component.
            </summary>
            <param name="value">Path to convert.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>The filename component of the given path value. 
            If the given value is null or UnsetValue, returns value.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.FileNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Never returns. Throws a NotImplementedException.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.IsTypeOfConverter">
            <summary>
            Converter that checks if bound object is of type specified by the value converter
            parameter
            </summary>
            <remarks>
            usage: specify the desired type as the ConverterParameter in the binding:
            {Binding Path=SomeProperty, Converter={conv:IsTypeOfConverter}, ConverterParameter={x:Type sys:Double}}
            
            The function Type.IsAssignableFrom() is called on the bound value, using the passed in
            parameter as the type instance.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.Converters.LessThanConverter">
            <summary>
            Converts an IComparable value to Boolean given by evaluating if the
            IComparable is less than the converter parameter.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Converters.LessThanConverter.Converter">
            <summary>
            Shared instance used by MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.LessThanConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns the shared instance.
            </summary>
            <param name="serviceProvider">Ignored.</param>
            <returns>The shared Converter instance.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.LessThanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an IComparable value to Boolean given by evaluating if the
            IComparable is less than the converter parameter.
            </summary>
            <param name="value">Input IComparable value</param>
            <param name="targetType">Should be Boolean.</param>
            <param name="parameter">
            Reference value against which to compare the value parameter.
            </param>
            <param name="culture">Ignored</param>
            <returns>True if value is less than parameter, 
            false if value is greater than or equal to parameter. 
            Returns UnsetValue if value is not an IComparable.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.MappingConverter">
            <summary>
            Converter for mapping from one set of arbitrary values to another set of 
            values, using Object.Equals.
            </summary>
            <remarks>
            Note that this map will only convert from keys to values. Converting
            back is not supported because it would involve searching through the
            values in the map. Searching would be O(n), and may not
            be predictable because the ordering may not be consistent across map
            instances.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.Converters.MappingConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.MappingConverter.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct with Map.
            </summary>
            <param name="map">
            IDictionary providing the mapping from keys to values.
            </param>
        </member>
        <member name="M:WPFCustomControls.Converters.MappingConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Supports MarkupExtension by returning the current instance.
            </summary>
            <param name="serviceProvider">Ingored.</param>
            <returns>This converter.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.MappingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from a key in the map to its corresponding value.
            </summary>
            <param name="value">Value to find as a key in the Map.</param>
            <param name="targetType">Ignored</param>
            <param name="parameter">Ignored</param>
            <param name="culture">Ignored</param>
            <returns>
            The item in the map corresponding to the key given as the 'value' parameter.
            DependencyProperty.UnsetValue if Map is null or the key is not found.
            </returns>
        </member>
        <member name="P:WPFCustomControls.Converters.MappingConverter.Map">
            <summary>
            Map of keys to values.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.NumberToStringConverter">
            <summary>
            A generic converter that will parse a string using the format of a the supplied NumberType.
            Also can be used in a Binding.ValidatinRules set as a ValidationRule
            </summary>
            <remarks>
            By rights, this should be a generic class, but XAML 3.5 doesn't support generics just yet (4.0 will.)
            Also, not that this Converter only works with Value types.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.ValidationRules.MaxValidationRule">
            <summary>
            Base abstract class for Validation Rules which supplies a unified localizable
            error message dictionary.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.NumberToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the Value to a string.  
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">not used</param>
            <param name="parameter">not used</param>
            <param name="culture">not used</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.NumberToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a String back to a specific type, determined by the NumberType property.
            </summary>
            <remarks>
            The string is parsed using the current system local and number format.
            </remarks>
            <param name="value">The String value to parse.</param>
            <param name="targetType">not used</param>
            <param name="parameter">not used</param>
            <param name="culture">not used</param>
            <returns>The converted value as an object, or UnsetValue if the parse fails.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.NumberToStringConverter.GetTryParseMethod(System.Type)">
            <summary>
            Gets the "TryParse" method, either from the static cache or from the Type itself.
            </summary>
            <param name="type">The Type to look up a TryParse for.</param>
            <returns>The TryParse method, or null if it doesn't exist.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.NumberToStringConverter.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Will validate that a given input value (a string) can be parsed by the TryParse function of a the
            type specified by NumberType.
            </summary>
            <param name="value">The value to check.</param>
            <param name="cultureInfo">not used</param>
            <returns>A valid result if the parse succeeds.</returns>
        </member>
        <member name="P:WPFCustomControls.Converters.NumberToStringConverter.NumberType">
            <summary>
            The Type that this converter operates on.  Default value is Int32
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.DefaultTextConverter">
            <summary>
            Provides the DefaultText value if the value given to Convert is null, UnsetValue, 
            or an empty string.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Converters.DefaultTextConverter.DefaultTextProperty">
            <summary>
            Default text used when the value to convert is null or empty.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.DefaultTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the given value: return the value string if it's filled in,
            otherwise return the DefaultText.
            </summary>
            <param name="value">Text to check and return if it's not null or empty.</param>
            <param name="targetType">Must be String.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>
            DefaultText value if the value given to Convert is null, UnsetValue, 
            or an empty string. Returns value.ToString() if that string is not empty
            text.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DefaultTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Never returns.  Throws a NotImplementedException.</returns>
        </member>
        <member name="P:WPFCustomControls.Converters.DefaultTextConverter.DefaultText">
            <summary>
            Default text used when the value to convert is null or empty.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.DoubleToStringConverter">
            <summary>
            A value converter (used by WPF) to convert a Double value into a string, and 
            vice-versa.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.DoubleToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion method from Double to String.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The string value of the Double.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DoubleToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Will interpret a String as a Double.
            </summary>
            <remarks>
            Note that this method does not catch parse exceptions.  It is a precondition that the 
            String be in valid Double format, or be Equal (case insensitive) to the NaNStringReplacement
            value, in which case the value is converted to Double.NaN.
            </remarks>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The parsed double value from the string input.</returns>
        </member>
        <member name="P:WPFCustomControls.Converters.DoubleToStringConverter.NaNStringReplacement">
            <summary>
            This String can be set to replace the NaN string with a more user-friendly result.
            Also useful for localization.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.DrawingColorConverter">
            <summary>
            Converts between System.Drawing.Color and System.Windows.Media.Color.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Converters.DrawingColorConverter.Converter">
            <summary>
            Shared converter instance.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.DrawingColorConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements MarkupExtension to return the shared Converter instance.
            </summary>
            <param name="serviceProvider"></param>
            <returns>Converter.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DrawingColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from System.Drawing.Color to System.Windows.Media.Color or from
            System.Windows.Media.Color to System.Drawing.Color.
            </summary>
            <param name="value">A System.Drawing.Color or System.Windows.Media.Color value.</param>
            <param name="targetType">System.Drawing.Color or System.Windows.Media.Color.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>
            The given Color value converted to the requested Color targetType.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DrawingColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from System.Drawing.Color to System.Windows.Media.Color or from
            System.Windows.Media.Color to System.Drawing.Color.
            </summary>
            <param name="value">A System.Drawing.Color or System.Windows.Media.Color value.</param>
            <param name="targetType">System.Drawing.Color or System.Windows.Media.Color.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>
            The given Color value converted to the requested Color targetType.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DrawingColorConverter.ConvertToMediaColor(System.Drawing.Color)">
            <summary>
            Convert from System.Drawing.Color to System.Windows.Media.Color.
            </summary>
            <param name="value">A System.Drawing.Color value.</param>
            <returns>A System.Windows.Media.Color value equivalent to the given 
            System.Drawing.Color value.</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.DrawingColorConverter.ConvertToDrawingColor(System.Windows.Media.Color)">
            <summary>
            Convert from System.Windows.Media.Color to System.Drawing.Color.
            </summary>
            <param name="value">A System.Windows.Media.Color value.</param>
            <returns>A System.Drawing.Color value equivalent to the given 
            System.Windows.Media.Color value.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.IntegerToDecimalConverter">
            <summary>
            Converts to and from decimal format. 
            </summary>
            <remarks>
            This converter is useful for the WpfSpinner, whose Value property is a decimal.
            It should only be used if the data you are modeling is an Int32.
            </remarks>
            <seealso cref="T:WPFCustomControls.WpfSpinner"/>
        </member>
        <member name="F:WPFCustomControls.Converters.IntegerToDecimalConverter.Converter">
            <summary>
            Default, reusable instance of this converter.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToDecimalConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements MarkupExtension to return IntegerToDecimalConverter.Converter.
            </summary>
            <param name="serviceProvider">ignored</param>
            <returns>IntegerToDecimalConverter.Converter</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToDecimalConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from an int to a decimal format.
            </summary>
            <param name="value">int value</param>
            <param name="targetType">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>a decimal version of the int</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToDecimalConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Rounds the decimal value to the nearest integer, using Math.Round(decimal)
            </summary>
            <param name="value">decimal value</param>
            <param name="targetType">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>Using Math.Round(decimal), rounds the value to the nearest Int32.  
            User beware, this converter does no checking for Overflow.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.IntegerToStringConverter">
            <summary>
            A value converter (used by WPF) to convert a Int32 value into a string, and 
            vice-versa.
            </summary>
            <remarks>
            May be used in XAML as a markup extension.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.IntegerToStringConverter.Converter">
            <summary>
            Common instance of this converter. May be shared to reduce memory demands,
            and provided by the MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from int to string.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Will interpret a string as an int.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:WPFCustomControls.Converters.IntegerToStringConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the MarkupExtension interface to return the shared Converter.
            </summary>
            <param name="serviceProvider">Not used.</param>
            <returns>The Converter instance.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.IsNotNullConverter">
            <summary>
            A useful converter for checking if a value is not null. Converts any 
            value other than null to true, and null to false.
            </summary>
            <remarks>
            May be used in XAML as a markup extension.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.IsNotNullConverter.Converter">
            <summary>
            Common instance of this converter. May be shared to reduce memory demands,
            and provided by the MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.IsNotNullConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the MarkupExtension interface to return the shared Converter.
            </summary>
            <param name="serviceProvider">Not used.</param>
            <returns>The Converter instance.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.IsNullConverter">
            <summary>
            A useful converter for checking if a value is null. Converts null to true, 
            and any value other than null to false.
            </summary>
            <remarks>
            May be used in XAML as a markup extension.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.IsNullConverter.Converter">
            <summary>
            Common instance of this converter. May be shared to reduce memory demands,
            and provided by the MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.IsNullConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the MarkupExtension interface to return the shared Converter.
            </summary>
            <param name="serviceProvider">Not used.</param>
            <returns>The Converter instance.</returns>
        </member>
        <member name="T:WPFCustomControls.Converters.ResourceKeyConverter">
            <summary>
            Uses the input value as a resource key to look up a string resource in
            the given ResourceManager.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.WrapWithCollectionConverter">
            <summary>
            Converts a single object to a ReadOnlyCollection containing that single object.
            </summary>
            <remarks>
            Especially useful for binding a TreeView's ItemsSource to a single root.
            May be used as a markup extension.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.WrapWithCollectionConverter.Converter">
            <summary>
            Common instance of this converter. May be shared to reduce memory demands,
            and provided by the MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.WrapWithCollectionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a single object value to a ReadOnlyCollection containing that object.
            </summary>
            <param name="value">Object to wrap in a ReadOnlyCollection</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>A new ReadOnlyCollection containing only value unless value is
            DependencyProperty.UnsetValue, in which case it returns DependencyProperty.UnsetValue.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.WrapWithCollectionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an IEnumerable to its first object.
            </summary>
            <param name="value">ReadOnlyCollection to unwrap</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>The passed in collection's first member object unless value is
            DependencyProperty.UnsetValue, in which case it returns DependencyProperty.UnsetValue.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.WrapWithCollectionConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the MarkupExtension interface to return the shared Converter.
            </summary>
            <param name="serviceProvider">Not used.</param>
            <returns>The Converter instance.</returns>
        </member>
        <member name="T:WPFCustomControls.CuiItemExtension">
            <summary>
            MarkupExtension that allows shorthand declaration of a 
            MaxCuiCommand in XAML.
            </summary>
        </member>
        <member name="M:WPFCustomControls.CuiItemExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Overriden to take the same parameters as ActionItemExtension, but
            instead wrap the result in a MaxCuiCommand class.
            </summary>
            <param name="serviceProvider">not used</param>
            <returns>if successfully resolved, a MaxCuiCommand that wraps the native
            max action.
            </returns>
        </member>
        <member name="T:WPFCustomControls.Customization.ContentLockedAttribute">
            <summary>
            A customization attribute that can be applied to items to indicate that the content of a 
            control is locked - not intented for user customization.
            </summary>
            <remarks>
            <para>This attribute can be applied to a RibbonItem or something that is represented in the 
            customization dialog to prevent the dialog from displaying the item's children.  This 
            allows an item that is meant to have a set configuration to be exposed in the CUI without
            allowing the user to be able to break that composite component by moving children around
            within the dialog.</para>
            <para>Note that because the children are hidden, then all relevant customization properties for the
            content-locked component need to be exposed on that component, even if they technically reflect
            properties of a hidden sub-component.</para>
            </remarks>
        </member>
        <member name="T:WPFCustomControls.Customization.ContextQueryBuilderWindow">
            <summary>
            Presents a tree of conditions, enabling the user to construct a context 
            query for a given UI item property.
            </summary>
            <summary>
            ContextQueryBuilderWindow
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ContextQueryBuilderWindow.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ContextQueryBuilderWindow.EntryProperty">
            <summary>
            View model for the current context query being configured in the UI.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ContextQueryBuilderWindow.MaxscriptQueryEntryProperty">
            <summary>
            Maxscript query entry stored within the root Entry.  This query is 
            presented in a separate field instead of in the tree view.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ContextQueryBuilderWindow.TargetItemProperty">
            <summary>
            UI Element currently under configuration.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ContextQueryBuilderWindow.BuildEntries">
            <summary>
            Populate the list of default ContextQueryEntry ViewModel objects to 
            be presented in the View.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ContextQueryBuilderWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ContextQueryBuilderWindow.Entry">
            <summary>
            View model for the current context query being configured in the UI.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ContextQueryBuilderWindow.EntryChanged">
            <summary>
            Fires when the view model for the current context query being 
            configured in the UI changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ContextQueryBuilderWindow.MaxscriptQueryEntry">
            <summary>
            Maxscript query entry stored within the root Entry.  This query is 
            presented in a separate field instead of in the tree view.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ContextQueryBuilderWindow.MaxscriptQueryEntryChanged">
            <summary>
            Fires when the maxscript query entry changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ContextQueryBuilderWindow.TargetItem">
            <summary>
            UI Element currently under configuration.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ContextQueryBuilderWindow.TargetItemChanged">
            <summary>
            Fires when the TargetItem changes.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ContextView">
            <summary>
            Interaction logic for ContextView.xaml
            </summary>
            <summary>
            ContextView
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ContextView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ContextView.ValueModeTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Overridden to provide specialized DataTemplates for each of the 
            ValueMode values.
            </summary>
            <param name="item">ValueMode to template</param>
            <param name="container">Parent control in the UI.</param>
            <returns>DataTemplate to apply to the given item.</returns>
        </member>
        <member name="T:WPFCustomControls.CuiMenuItem">
            <summary>
            A menu item that will reflect its Command member if the Command is a 
            ICuiAction object.
            </summary>
            <remarks>
            Note that if the Header is defined at design-time, then this text will win
            over the ICuiAction.MenuText member.  Leave the Header field empty if you
            want the action item to supply the menu text.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.Customization.InsertArrow">
            <summary>
            Constructs a small arrow for displaying the insertion point during drag
            and drop.
            </summary>
            <summary>
            InsertArrow
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.InsertArrow.StrokeThicknessProperty">
            <summary>
            Thickness of the arrow's lines.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.InsertArrow.PointLengthProperty">
            <summary>
            The length of the arrow's point in the x direction.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.InsertArrow.StrokeProperty">
            <summary>
            Brush used to draw the arrow's lines.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.InsertArrow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.InsertArrow.StrokeThickness">
            <summary>
            Thickness of the arrow's lines.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.InsertArrow.PointLength">
            <summary>
            The length of the arrow's point in the x direction.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.InsertArrow.Stroke">
            <summary>
            Brush used to draw the arrow's lines.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.NumberCellEditor">
            <summary>
            Interaction logic for NumberCellEditor.xaml
            </summary>
            <summary>
            NumberCellEditor
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.NumberCellEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.NumberCellEditor.NumberType">
            <summary>
            The Type that this cell editor handles.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonCustomizationDataGrid">
            <exclude/>
            <summary>
            Data grid used for Ribbon Customization Property Editing grid.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonCustomizationDataGrid.OnCreateAutomationPeer">
            <exclude />
            <summary>
            We override this to avoid a conflict in automation code that causes a recursive call to the 
            automation API.  We return null to turn off automation.
            </summary>
            <remarks>
            Another solution would be to transition to the official .NET 4.0 DataGrid, which seems to work fine.
            However, there seem to be some binding issues that would need to be resolved.
            </remarks>
            <returns>returns null, to kill automation on this class</returns>
        </member>
        <member name="T:WPFCustomControls.Customization.SerializationValidator">
            <exclude />
            <summary>
            A utility class used to generate serialization debugging info.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonPropertyDirectory">
            <summary>
            Contains a cross-reference of classes to properties to serialize.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonPropertyDirectory.CreateMaxRibbonControlEntries">
            <summary>
            Class specific properties for the MaxRibbonControl.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonPropertyDirectory.CreateRibbonControlEntries">
            <summary>
            Class specific properties for the RibbonControl.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectory.HandleAsNodeDeclarations">
            <summary>
            Contains the list of types that can't be inlined as attributes in XAML - instead, they
            need sub-node property declaration syntax
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry">
            <summary>
            Describes a property entry for the RibbonPropertyDirectory.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.PropertyName">
            <summary>
            The name of the property, as seen in code.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.UiPropertyName">
            <summary>
            A human readable version of the property name.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.PropertyCategory">
            <summary>
            The category it belongs to.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.OriginalType">
            <summary>
            The type from whence this property entry originated.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.Customizable">
            <summary>
            Whether this property can be customized via the Customization dialog.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.AlwaysIgnore">
            <summary>
            Override and remove property serialization inherited from base types.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.IgnorePropertyDefault">
            <summary>
            Indicates if we should write out the value during serialization even
            if it is equal to the declared property default.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.DefaultValue">
            <summary>
            Default value used when the Property's value is reset or cleared.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPropertyDirectoryEntry.IsOverride">
            <summary>
            Rare case where a property is actually a property override, using 
            the C# 'new' keyword
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonSerializationWriter.ExportResourceDictionary(System.Windows.ResourceDictionary,WPFCustomControls.MaxRibbonControl,System.String)">
            <summary>
            Export a ResourceDictionary containing serializable elements to the
            given file path.  
            </summary>
            <remarks>
            Any ReverseBindings stored in the given MaxRibbonControl
            targeting the ResourceDictionary's descendants are serialized as
            a child ResourceDictionary. The resulting file is suitable for 
            inclusion as a Ribbon Extension.
            </remarks>
            <param name="root">Dictionary to export.</param>
            <param name="ribbon">
            Parent MaxRibbonControl for the dictionary's elements.
            </param>
            <param name="outputPath">Where to write the file.</param>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonSerializationWriter.ConstructSubItem(System.Object)">
            <summary>
            This function will traverse down the logical tree, creating nodes
            and basing the hierarchy on the ContentProperty attribute.
            </summary>
            <param name="item">The item to serialize.</param>
            <returns>The new xml node created for item.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonSerializationWriter.AddAttributes(System.Xml.XmlNode,System.Object)">
            <summary>
            This is where the magic happens - we cross reference our incoming types
            with a directory of properties to serialize.  This list is mostly static.
            </summary>
            <param name="node">The node to add attributes to.</param>
            <param name="source">The source item to serialize.</param>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonSerializationWriter.GeneratePrefix(System.Type)">
            <summary>
            An open-ended method for generating global xaml prefixes for namespaces.
            </summary>
            <remarks>
            The basic format is to use a combination of the assembly and leaf namespace:
            (assembly name 4 chars)_(leaf namespace 5 chars)
            It's possible that this will generate a non-unique prefix.  We append counters at
            the end to ensure uniqueness.
            </remarks>
            <param name="aType">The type for whom a namespace prefix should be generated for.</param>
            <returns>The unique prefix.</returns>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.ContextQueryEntry">
            <summary>
            ViewModel representing the current state of an available ContextQuery within
            a particular MultiContextQuery instance.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.ActiveProperty">
            <summary>
            Whether this ContextQuery is active in determining the resulting
            value in the current MultiContextQuery.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.LabelProperty">
            <summary>
            Text label presented in the View.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.QueryProperty">
            <summary>
            ContextQuery presented by this entry.  The ContextQuery performs the
            actual query to evaluate the current scene state.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.Active">
            <summary>
            Whether this ContextQuery is active in determining the resulting
            value in the current MultiContextQuery.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.Label">
            <summary>
            Text label presented in the View.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.Query">
            <summary>
            ContextQuery presented by this entry.  The ContextQuery performs the
            actual query to evaluate the current scene state.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.ActiveChanged">
            <summary>
            Fires when the Active property value changes.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ViewModel.ContextQueryEntry.QueryChanged">
            <summary>
            Fires when the Query object changes.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.ContextViewModel">
            <summary>
            ViewModel object for the ContextView UI element.  Manages the current
            context mode (Always, Never, or Conditional) and establishes a data binding
            between the TargetItem's TargetProperty and a ContextQuery object when
            the mode is set to Conditional.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ContextViewModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ContextViewModel.#ctor(System.String,WPFCustomControls.ReverseBinding,WPFCustomControls.ReverseBindingStorage)">
            <summary>
            Constructor generating a ContextViewModel from an existing ReverseBinding.
            </summary>
            <param name="propertyLabel">
            The localized label used in the UI to describe the property under customization.
            </param>
            <param name="binding">
            Existing ReverseBinding used to populate the View Model's fields.
            </param>
            <param name="storage">
            Storage to persist a Conditional mode ReverseBinding past the interaction
            with the view.
            </param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ContextViewModel.#ctor(System.String,System.Object,System.String,System.Windows.Data.IValueConverter,WPFCustomControls.ReverseBindingStorage)">
            <summary>
            Constructor generating a ContextViewModel with all necessary data.
            </summary>
            <param name="propertyLabel">
            The localized label used in the UI to describe the property under customization.
            </param>
            <param name="targetItem">
            UI Element under customization.
            </param>
            <param name="targetProperty">
            Name for the property under customization on targetItem.
            </param>
            <param name="converter">
            Converter used to convert the context query's result to the 
            targetProperty value.
            </param>
            <param name="storage">
            Storage to persist a Conditional mode ReverseBinding past the interaction
            with the view.
            </param>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.ModeProperty">
            <summary>
            The selected ValueMode.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.PropertyLabelProperty">
            <summary>
            The localized label used in the UI to describe the property under customization.
            </summary>
            <remarks>
            The PropertyLabel is propagated to the ContextBuilderWindow's title.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.TargetItemProperty">
            <summary>
            The item under customization in the UI.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.TargetPropertyProperty">
            <summary>
            The property under customization on the TargetItem.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.MultiContextQueryProperty">
            <summary>
            Current context query customizing the TargetItem's state.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.ConverterProperty">
            <summary>
            Converter used to convert the context query's result to the 
            targetProperty value.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.IntermediateValueProperty">
            <summary>
            Intermediate value bound to the TargetItem's TargetProperty when
            Mode is Always or Never and this ViewModel is active. This binding
            is discarded when the ViewMode is discarded or when the Mode is set to
            Conditional
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ContextViewModel.ToolTipContentProperty">
            <summary>
            Content intended for the ContextView's ToolTip representing the current 
            Conditional Context query.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ContextViewModel.HandleModeChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Current data binding set to the TargetItem's TargetProperty.  Changes
            when the Mode changes.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ContextViewModel.UpdateTargetState">
            <summary>
            Update the current binding to the TargetItem's TargetProperty according 
            to the Mode.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.Mode">
            <summary>
            The selected ValueMode.
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ViewModel.ContextViewModel.ModeChanged">
            <summary>
            Fires when the selected ValueMode changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.PropertyLabel">
            <summary>
            The localized label used in the UI to describe the property under customization.
            </summary>
            <remarks>
            The PropertyLabel is propagated to the ContextBuilderWindow's title.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.TargetItem">
            <summary>
            The item under customization in the UI.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.TargetProperty">
            <summary>
            The property under customization on the TargetItem.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.MultiContextQuery">
            <summary>
            Current context query customizing the TargetItem's state.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.Converter">
            <summary>
            Converter used to convert the context query's result to the 
            targetProperty value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.IntermediateValue">
            <summary>
            Intermediate value bound to the TargetItem's TargetProperty when
            Mode is Always or Never and this ViewModel is active. This binding
            is discarded when the ViewMode is discarded or when the Mode is set to
            Conditional
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.ToolTipContent">
            <summary>
            Content intended for the ContextView's ToolTip representing the current 
            Conditional Context query.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.CurrentBinding">
            <summary>
            Current data binding set to the TargetItem's TargetProperty.  Changes
            when the Mode changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ContextViewModel.ReverseBindingStorage">
            <summary>
            Storage to persist a Conditional mode ReverseBinding past the interaction
            with the view.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.ContextViewModel.ValueMode">
            <summary>
            Mode for the context binding.  Always has the context always evaluate
            to true. Never has the context always evaluate to false. Conditional
            evaluates the scene context to determine its value.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry">
            <summary>
            View Model object representing a query composed of child queries.  Contains
            a list of child ContextQueryEntries and the Query object is intended to be
            a MultiContextQuery.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.HandleEntriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Subscribe to ContextQueryEntry ActiveChanged events as ContextQueryEntries 
            are added to the Entries list.  Unsubscribe as they are removed.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Information about the collection change.</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.HandleQueryChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Respond to a change in the Query object to update the active states
            presented in the UI.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Information about this event.</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.UpdateChildEntryActiveStates">
            <summary>
            Update the Active states of ContextQueryEntries presented in the UI 
            according to the ContextQueries currently participating in the
            MultiContextQuery.
            </summary>
            <remarks>
            This is how we read back an existing MultiContextQuery's configuration.
            The MultiContextQuery is usually set after the control is initialized,
            and the list of default entries has been constructed.  However, this
            MultiContextQuery may already have certain child queries.  This handler
            uses each ContextQuery's InternalName to identify its corresponding 
            ContextQueryEntry ViewModel object presented in the UI.  A matched 
            ContextQueryEntry's Query property is swapped out for the live 
            ContextQuery in the MultiContextQuery, and its Active property is set to
            true.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.HandleEntryActiveChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When a ContextQueryEntry's Active status changes, add it to (Active) or 
            remove it from (Inactive) the MultiContextQuery's Query list.  This is
            how we dynamically build up the child queries in a MultiContextQuery.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.Entries">
            <summary>
            List of ContextQueryEntries presented in the View.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.MultiContextQueryEntry.MultiContextQuery">
            <summary>
            Wrapper around Query dependency property performing cast to 
            MultiContextQuery.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.ViewModelNodeFactory">
            <summary>
            Produces a ViewModelNode given the node's source item.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ViewModelNodeFactory.CreateNode(System.Object)">
            <summary>
            Produces a ViewModelNode given the node's source item.
            </summary>
            <param name="sourceItem">Source data item wrapped within the produced node</param>
            <returns>A new ViewModelNode wrapping the given source item.</returns>
        </member>
        <member name="T:WPFCustomControls.DragAdorner">
            <summary>
            An adorner that can be used generically to add the element as the drag
            object in a drag-and-drop operation.
            </summary>	
        </member>
        <member name="M:WPFCustomControls.DragAdorner.AttachDragAdorner(System.Windows.FrameworkElement,System.Double,System.Boolean)">
            <summary>
            Used as the entry point to this adorner.  Call this method with an element that you want to
            see dragged across the surface of its owning window.  Wrap the DragAdorner in a using clause
            that contains the DoDragDrop call, and the adorner shall be removed and disposed of as expected.
            </summary>
            <remarks>
            For this to work correctly, the window needs to be marked AllowDrop=true.
            </remarks>
            <param name="element">The element that should be dragged (doesn't need to be the triggering element.)
            Note that the element is used as the stencil for a VisualBrush, so nothing happens to the element itself.
            </param>
            <param name="opacity">Opacity of dragging element.</param>
            <param name="useDesiredSize">Whether to use the element's Desired size or Actual size.</param>
            <returns>The adorner created for this drag.</returns>
        </member>
        <member name="M:WPFCustomControls.DragAdorner.Detach">
            <summary>
            Detaches and removes the adorner from the adorner layer of the parent window that owns
            the passed in element.
            </summary>
        </member>
        <member name="T:WPFCustomControls.DragEndNotifier">
            <summary>
            Handy default implementation for IDragEndNotifier.  DoDragDrop serves as
            as easy wrapper for DragDrop.DoDragDrop.
            </summary>
        </member>
        <member name="T:WPFCustomControls.IDragEndNotifier">
            <summary>
            Notifies registered observers participating in a drag and drop operation
            that the interaction has ended.
            </summary>
        </member>
        <member name="T:WPFCustomControls.FloatingFrame.FloatingRibbonFrameCallback">
            <summary>
            This is the class that places all the event handler of a floating RibbonPanelFrame.
            Because RibbonPanelFrame cannot be subclassed, and we need to handle static 
            event RibbonPanelFrame.OrphanPanelFrameCreated, we need a "binding" class
            that handles RibbonPanelFrame events for each RibbonPanelFrame.
            </summary>
        </member>
        <member name="T:WPFCustomControls.FloatingFrame.MaxFloatingFrame">
            <summary>
            A utility class for a Ribbon Floating frame.  Manages a floating frame instance
            and provides a way to show a set of Ribbon Panels, as well as close the managed frame.
            </summary>
            <remarks>
            This is a wrapper over the RibbonPanelFrame object and is not a UI element itself.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.FloatingFrame.MaxFloatingFrame.ShowPanels(System.Collections.Generic.ICollection{WPFCustomControls.MaxModelingRibbonPanel})">
            <summary>
            Shows a collection of panels in a floating frame.  If this collection
            is empty, this call is ignored.  Call CloseFrame() to close the frame.
            </summary>
            <remarks>
            There is no restriction on the source of the panels, though these should come
            from the main ribbon, and actually exist in the ribbon.
            </remarks>
            <param name="panels">A list of panels to show.</param>
        </member>
        <member name="M:WPFCustomControls.FloatingFrame.MaxFloatingFrame.CloseFrame">
            <summary>
            Closes the managed frame, if it exists.
            </summary>
        </member>
        <member name="E:WPFCustomControls.FloatingFrame.MaxFloatingFrame.FrameClosed">
            <summary>
            Called when the Frame has been closed.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.AlignmentToVisibilityConverter">
            <summary>
            A converter for the GridSplitter ControlTemplate.  GridSplitter will
            adjust columns or rows, according to its Horizontal or VerticalAlignment properties.
            If either or both is set to 'Stretch', then GridSplitter adjusts Grid cells in that
            particular orientation.
            This converter converts between 'Stretch' and Visibility.Visible.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.AlignmentToVisibilityConverter.#ctor">
            <summary>
            Standard Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.AlignmentToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts between an Alignment == Stretch, to Visibility == Visible.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>Visibility.Visible if the given alignment == stretch, otherwise Visibility.Collapsed</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.AlignmentToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back from Visibility to Alignment.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The Alignment value based on the visibility.</returns>
            <seealso cref="M:WPFCustomControls.Converters.AlignmentToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>
        </member>
        <member name="P:WPFCustomControls.Converters.AlignmentToVisibilityConverter.IsHorizontal">
            <summary>
            Whether this converter should convert from horizontal or vertical alignments.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ActionItemSelector">
            <summary>
            Interaction logic for ActionItemSelector.xaml
            </summary>
            <summary>
            ActionItemSelector
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ActionItemSelector.ResetActionItemList">
            <summary>
            Reconstruct the action list according to the current Context (or Group,
            in the UI) settings.
            </summary>
            <returns>A DataTable containing the action list.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ActionItemSelector.ResetCategories">
            <summary>
            Reset the Category list according to the current Context (or Group, 
            in the UI.)  
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ActionItemSelector.InitializeContexts">
            <summary>
            Initialize the context list (Group, in the UI).  This is a static list.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ActionItemSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ActionItemSelector.DragEnabled">
            <summary>
            When this is set to true, Drag and Drop on this control is enabled.
            </summary>
        </member>
        <member name="T:WPFCustomControls.CheckableRepeatButton">
            <exclude/>
            <summary>
            This class is only necessary because ButtonBase implements its IsPressed
            property with the setter being protected.  This class allows us to 
            programmatically keep the button pressed.
            </summary>
        </member>
        <member name="P:WPFCustomControls.CheckableRepeatButton.IsChecked">
            <summary>
            This property exposes the IsPressed accessors to public access.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.MultiContextQuery">
            <summary>
            ContextQuery combining the results of multiple sub-queries.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MultiContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MultiContextQuery.CopyFrom(System.Object)">
            <summary>
            Copy the given object's current property values into this instance.
            Clones every ContextQuery from the source's Queries list.
            </summary>
            <param name="source">Object to copy.</param>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.MultiContextQuery.RefreshValue">
            <summary>
            Overridden to call RefreshValue on all child queries.
            </summary>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.MultiContextQuery.RootProperty">
            <summary>
            Indicates that this MultiContextQuery is the root of its query tree.
            </summary>
            <remarks>
            Root affects how the Label is formatted. This property must be set 
            externally, the MultiContextQuery does not determine if it has a parent
            automatically.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.MultiContextQuery.ConverterProperty">
            <summary>
            Converter used to combine the child query results into this query's
            result.
            </summary>
            <remarks>
            Defaults to AndMultiValueConverter.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.ContextQueries.MultiContextQuery.FallbackValueProperty">
            <summary>
            Value applied when there are no ContextQueries in the Queries list.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.MultiContextQuery.Queries">
            <summary>
            Set of queries whose results are combined to produce this query's result.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.MultiContextQuery.Root">
            <summary>
            Indicates that this MultiContextQuery is the root of its query tree.
            </summary>
            <remarks>
            Root affects how the Label is formatted. This property must be set 
            externally, the MultiContextQuery does not determine if it has a parent
            automatically.
            </remarks>		
        </member>
        <member name="E:WPFCustomControls.ContextQueries.MultiContextQuery.RootChanged">
            <summary>
            Fires when the value of Root changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.MultiContextQuery.Converter">
            <summary>
            Converter used to combine the child query results into this query's
            result.
            </summary>
            <remarks>
            Defaults to AndMultiValueConverter.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.MultiContextQuery.FallbackValue">
            <summary>
            Value applied when there are no ContextQueries in the Queries list.
            </summary>
        </member>
        <member name="E:WPFCustomControls.ContextQueries.MultiContextQuery.FallbackValueChanged">
            <summary>
            Fires when the FallbackValue changes.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonCustomizationPropertiesView">
            <summary>
            Interaction logic for RibbonCustomizationPropertiesView.xaml
            </summary>
            <summary>
            RibbonCustomizationPropertiesView
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonCustomizationPropertiesView.LoadImage(System.Uri)">
            <summary>
            Load and freeze image from Uri.
            </summary>
            <param name="fileUri">The Uri pointing to the image to load.</param>
            <returns>The loaded and frozen image source.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonCustomizationPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonCustomizationPropertiesView.ToolTipDictionary">
            <summary>
            Contains tooltip definitions for each individual property row, indexed by Type and 
            property name.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonTreeViewPanel">
            <summary>
            Interaction logic for RibbonModelView.xaml
            </summary>
            <summary>
            RibbonTreeViewPanel
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonTreeViewPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.RibbonPreviewView">
            <summary>
            Interaction logic for RibbonPreviewView.xaml
            </summary>
            <summary>
            RibbonPreviewView
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.RibbonPreviewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPreviewView.IsExpanded">
            <summary>
            Exposes the Expander.IsExpanded property.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.RibbonPreviewView.BlockNotifications">
            <summary>
            You can prevent the SelectedItemChanged event from being raised on a SelectedItem
            change.  This is used to set the selection programmatically.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.StripUriInfoConverter">
            <summary>
            A specialized converter which takes a String in Uri format and returns the
            cleaner Absolute or filename Path version.
            </summary>
            <remarks>
            Note that this converter does NOT work with Uri objects - only strings that
            are formatted in Uri format (such as a string "file:\\\d:/example.txt")
            </remarks>
        </member>
        <member name="M:WPFCustomControls.Customization.StripUriInfoConverter.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.StripUriInfoConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the Uri formatted string into a simple Absolute or filename path.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The converted string, or System.Windows.DependencyProperty.UnsetValue if the Uri is not valid.</returns>
            <seealso cref="P:WPFCustomControls.Customization.StripUriInfoConverter.ConvertToAbsolute"/>
        </member>
        <member name="M:WPFCustomControls.Customization.StripUriInfoConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>standard</returns>
        </member>
        <member name="P:WPFCustomControls.Customization.StripUriInfoConverter.ConvertToAbsolute">
            <summary>
            Set this to false if the user wants only the filename and extension, not the full path.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.Customization.TrimByValueConverter">
            <summary>
            Takes a double value and subtracts (or adds, if the value is negative) a certain amount.  Useful for drawing
            templates where you want to bind to a full dimension, minus two pixels, for example.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.TrimByValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Does the modification of the value (see class summary.)
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>standard</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.TrimByValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>standard</returns>
        </member>
        <member name="P:WPFCustomControls.Customization.TrimByValueConverter.ValueTrim">
            <summary>
            The value to trim (or add, if it is negative.)
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.CellTemplateSelector">
            <summary>
            The Template selector for the Properties data grid.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.CellTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects the template according to the viewmodel data type.
            </summary>
            <param name="item">The PropertyRow.</param>
            <param name="container">The data grid cell container.</param>
            <returns>The DataTemplate appropriate to this sort of data.</returns>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.NodeProperties">
            <summary>
            The viewmodel object for the RibbonCustomizationPropertiesView class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.PropertyRow">
            <summary>
            A viewmodel object for a property.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.PropertyName">
            <summary>
            The name of the property - used for reflection.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.UiName">
            <summary>
            The name that should be displayed in a User Interface to
            represent the property.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.CategoryName">
            <summary>
            The property category.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.PropertyValue">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.DefaultValue">
            <summary>
            Default value used when the PropertyValue is reset or cleared.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.PropertyType">
            <summary>
            The property type.  
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.ToolTip">
            <summary>
            A ToolTip to associate with this particular row.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.PropertyRow.Category">
            <summary>
            The property category.  
            </summary>
        </member>
        <member name="E:WPFCustomControls.Customization.ViewModel.PropertyRow.PropertyValueChanged">
            <summary>
            Signals when the value of this property has been changed
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.RibbonTypeTemplateSelector">
            <summary>
            This class is used to map the DataTemplates defined in RibbonTreeView to 
            Ribbon types so that they can be represented in the TreeView.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.RibbonTreeView">
            <summary>
            Interaction logic for RibbonTreeViewNew.xaml
            </summary>
            <summary>
            RibbonTreeView
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.UpdateTimer(System.Windows.Controls.TreeViewItem)">
            <summary>
            Reset the timer to expand the given target item.
            </summary>
            <param name="target">TreeViewItem to expand on timer tick.</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.CalculateTargetParentAndInsertIndex(System.Windows.Controls.TreeViewItem,System.Windows.Point)">
            <summary>
            Figure out the parent node under which we will insert a child,
            as well as the index within the current child list at which to insert.
            Sets TargetParent, InsertIndex, and NearestItem appropriately.
            </summary>
            <param name="hitTarget">Actual TreeViewItem found by our hit test for 
            the cursor position</param>
            <param name="screenPoint">Screen position of the cursor</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.DetermineChildInsertIndex(System.Windows.Controls.TreeViewItem,System.Windows.Point)">
            <summary>
            Determine the insertion position for the given hit point within
            the given parent TreeViewItem's child list.  Sets NearestItem.
            </summary>
            <param name="parent">Parent in which to insert the child.</param>
            <param name="screenPoint">Hit point in screen coordinate space.</param>
            <returns>Index at which to insert a drop child within the parent's
            child list.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.SetHighlight(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Turn the highlight on or off for the given TreeViewItem and its parents.
            </summary>
            <param name="hitChild">Item to highlight</param>
            <param name="highlight">New highlight value</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.GetHitPoint(System.Windows.DragEventArgs)">
            <summary>
            Get the hit point of the given drag event in screen coordinates. We
            adjust this point to affect the user interaction.
            </summary>
            <param name="e">Current drag event</param>
            <returns>Active hit point in screen coordinates</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.DrawInsertMarker">
            <summary>
            Draw a little marker arrow to display where the new node will be 
            inserted.
            </summary>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.RibbonTreeView.Arrow">
            <summary>
            The insert marker arrow UIElement.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.FindHitItem(System.Windows.Controls.ItemsControl,System.Windows.Point)">
            <summary>
            Find the deepest child hit by the current hit point, recursively.  
            We adjust the TreeViewItem bounding box to allow the hit point to 
            exist anywhere to the right of the item.
            </summary>
            <param name="parent">Current parent whose children will be hit test.</param>
            <param name="screenPoint">Hit point in screen coordinate space.</param>
            <returns>The child hit at the current position, or null if
            nothing is found.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.GetScrollViewer(System.Windows.DependencyObject)">
            <summary>
            Find the first ScrollViewer in the given element's Visual Tree as 
            found by DFS. This is intended for use with a TreeView, which has 
            a very narrow tree until the ScrollViewer is found.  This could be very 
            inefficient with a different input type.
            </summary>
            <remarks>
            Unfortunately, the elements in the TreeView's control template are not
            named.
            </remarks>
            <param name="element">Root of the tree to search</param>
            <returns>A ScrollViewer if found, null otherwise</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.PerformDropAction(System.Windows.IDataObject)">
            <summary>
            Insert a new or moved node in the selected target location.
            </summary>
            <param name="dropData">Data pack contained in the drag event</param>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InsertDataNode(System.Object)">
            <summary>
            Insert the given model object (ribbon item, etc.) in the current
            TargetParent at the determined InsertIndex.
            </summary>
            <param name="data">Model object to insert.</param>
            <returns>ViewModelNode created for the given model object.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.IsValidDrag(System.Windows.Point,System.Windows.Point)">
            <summary>
            Has the cursor moved enough to consider the interaction a drag?
            </summary>
            <param name="start">Start point for the cursor move.</param>
            <param name="end">End point for the cursor move.</param>
            <returns>true if the cursor has moved enough to initiate a drag.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.HitItem">
            <summary>
            TreeViewItem found by our hit test during the last Drag Over.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InsertMarker">
            <summary>
            The insert marker adorner.  
            Use with DrawInsertMarker and ClearInsertMarker. 
            Null when no Adorner is displayed.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.TargetParent">
            <summary>
            Target parent ViewModelNode for the current drag operation.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InsertIndex">
            <summary>
            Insertion index within the TargetParent's child list for the current
            drag operation.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.NearestItem">
            <summary>
            Nearest TreeViewItem to the hit point.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InitialDownPosition">
            <summary>
            The initial MouseDown position.  This is used to determine a valid drag
            action for the treelist items.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonTreeView.InitialItem">
            <summary>
            Initial item for a drag operation.  We record this item when the 
            mouse down event first occurs.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.RibbonViewModel">
            <summary>
            The main ViewModel of the Ribbon Customization Dialog.
            This VM is specific to Ribbon Customization, though it uses 
            ViewModelNodes, which are not.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonViewModel.SetSelection(System.Object)">
            <summary>
            This method sets the selection in the model programmatically.
            </summary>
            <remarks>
            This is as opposed to having the view report selection changes.  By
            setting the selection, we have to also guarantee that the viewmodel's
            node is properly expanded.
            </remarks>
            <param name="newSelection">The new viewmodel node source item to select.</param>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonViewModel.OnlyShowAvailable">
            <summary>
            When true, 'unavailable' UI elements should be filtered out
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.RibbonViewModel.SelectedPanel">
            <summary>
            The currently selected panel, based on the current Node selection.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.RibbonViewModelNodeFactory">
            <exclude />
            <summary>
            Creates and configures ViewModelNodes for the Ribbon ViewModel.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.RibbonViewModelNodeFactory.CreateNode(System.Object)">
            <summary>
            Handles basic creation of ViewModelNodes for Ribbon views, and sets
            some parameters according to the backing item type.
            </summary>
            <param name="item">The object that will be stored as SourceItem.</param>
            <returns>A newly instantiated and configured ViewModelNode.</returns>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ViewModelNode.ChildSourceProperty">
            <summary>
            Source list for the next level in the data hierarchy.  This node's
            child source items.
            </summary>
            <remarks>
            If this node has children, it must also have a ChildNodeFactory to 
            specify how ViewModelNodes are built for its children.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Customization.ViewModel.ViewModelNode.ChildNodeFactoryProperty">
            <summary>
            Builds ViewModelNodes given child source items.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ViewModelNode.IsChildOf(WPFCustomControls.Customization.ViewModel.ViewModelNode)">
            <summary>
            Recurses over hierarchy to check if this node is in the sub-tree 
            of a passed in node.
            </summary>
            <param name="aNode">The node to check whether this node is a child of.</param>
            <returns>true if this node is in the sub-tree of the passed in node.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ViewModelNode.FindRoot">
            <summary>
            Gets the root node of this tree.
            </summary>
            <returns>The root node, or this object, if it is the root.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ViewModelNode.GetEnumerator">
            <summary>
            Returns an iterator that, starting with this node, iterates down
            all nodes in the sub-tree that has this node as a root.
            </summary>
            <returns>An iterator used to traverse the subtree that has this is a root.</returns>
        </member>
        <member name="M:WPFCustomControls.Customization.ViewModel.ViewModelNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Not meant to be called.
            </summary>
            <returns>Not meant to be called.</returns>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ViewModelNode.ChildSource">
            <summary>
            Source list for the next level in the data hierarchy.  This node's
            child source items.
            </summary>
            <remarks>
            If this node has children, it must also have a ChildNodeFactory to 
            specify how ViewModelNodes are built for its children.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.Customization.ViewModel.ViewModelNode.ChildNodeFactory">
            <summary>
            Builds ViewModelNodes given child source items.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.ViewModel.ViewModelNode.ViewModelNodeEnumerator">
            <summary>
            Iterator class for a tree of ViewModelNodes.  Starts at the current node and descends down
            through the subtree.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Customization.Widget">
            <summary>
            A placeholder for ribbon item types, that are placed in 'widget list'.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.Widget.ItemName">
            <summary>
            The name that should appear in the UI that represents this Widget.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.Widget.WidgetType">
            <summary>
            The Type that is used to instantiate the ribbon item.  This Type
            should have a public parameterless constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.Customization.Widget.Icon">
            <summary>
            The widget Icon.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.ColorToSolidColorBrushConverter">
            <summary>
            Converts a SolidColorBrush to a Color
            </summary>
            <remarks>
            May be used in XAML as a markup extension.
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.ColorToSolidColorBrushConverter.Converter">
            <summary>
            Common instance of this converter. May be shared to reduce memory demands,
            and provided by the MarkupExtension.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from a Color to a SolidColorBrush
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The converted SolidColorBrush</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from a SolidColorBrush to a Color
            </summary>
            <param name="value">standard</param>
            <param name="targetType">standard</param>
            <param name="parameter">standard</param>
            <param name="culture">standard</param>
            <returns>The converted Color</returns>
        </member>
        <member name="M:WPFCustomControls.Converters.ColorToSolidColorBrushConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements the MarkupExtension interface to return the shared Converter.
            </summary>
            <param name="serviceProvider">Not used.</param>
            <returns>The Converter instance.</returns>
        </member>
        <member name="T:WPFCustomControls.MaxCuiCommand">
            <summary>
            An adapter which converts a native MaxActionItem and fits it to a ICuiActionCommand
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxCuiCommand.#ctor(ManagedServices.MaxActionItem)">
            <summary>
            Basic constructor
            </summary>
            <param name="item">item to wrap</param>
        </member>
        <member name="M:WPFCustomControls.MaxCuiCommand.CanExecute(System.Object)">
            <summary>
            Whether the command can execute.
            </summary>
            <param name="parameter">command parameter</param>
            <returns></returns>
        </member>
        <member name="M:WPFCustomControls.MaxCuiCommand.RaiseCanExecuteChanged">
            <summary>
            Raises CanExecuteChanged.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxCuiCommand.Execute(System.Object)">
            <summary>
            Runs the Execute method on the Action Item.
            </summary>
            <param name="parameter">command parameter (not used)</param>
        </member>
        <member name="M:WPFCustomControls.MaxCuiCommand.RequeryStates">
            <summary>
            Implementation of IRequeryStates interface
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.Item">
            <summary>
            Wrapped item
            </summary>
        </member>
        <member name="E:WPFCustomControls.MaxCuiCommand.CanExecuteChanged">
            <summary>
            When the state of CanExecute changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.ActionText">
            <summary>
            Action text (maps to MenuText on ActionItem)
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.ButtonText">
            <summary>
            The text that would appear on a button
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.Category">
            <summary>
            Category of action.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.InternalActionText">
            <summary>
            not used in this context
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.InternalCategory">
            <summary>
            not used in this context
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.IsChecked">
            <summary>
            Whether the action is checked or not.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.IsEnabled">
            <summary>
            If action is enabled.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.IsVisible">
            <summary>
            If action is visible.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.MenuText">
            <summary>
            Text that would appear in a menu item.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.TooltipKey">
            <summary>
            Gets access to the tooltip key which is assigned to the action
            The key is used to connect the action and its rich tooltip which is prepared by 
            Doc team.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxCuiCommand.ShortcutString">
            <summary>
            Returns the human-readable string describing the hotkey associated with the action,
            if it exists.
            </summary>
        </member>
        <member name="E:WPFCustomControls.MaxCuiCommand.PropertyChanged">
            <summary>
            Part of the INotifyPropertyChanged interface implementation
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonCheckBox">
            <summary>
            RibbonCheckBox misguidedly shadows the IsChecked member it inherits from
            RibbonCommandItem.  As a result, clients calling RibbonCheckBox.IsChecked
            will not necessarily receive the same result as those calling 
            RibbonCommandItem.IsChecked. This subclass tries to clean up a bit of the 
            mess by synchronizing the two IsChecked values.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonMenuButton.HandleHostEvent(System.Object,Autodesk.Internal.Windows.HostEventArgs)">
            <summary>
            This handler is needed because the toolkit does not pass HostEvents down to child elements 
            by default.  So we handle the propagation ourselves.
            </summary>
            <param name="sender">not used</param>
            <param name="e">The event args of the host event.  In our case, we are looking for MaxHostEventArgs.</param>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonMenuItem.Synchronize">
            <summary>
            Synchronize items to the action item's IsChecked and IsEnabled states.
            </summary>
            <remarks>
            We borrow the action item cache from MaxActionItemHostEventListener, since it's
            basically doing the same thing.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonPanelSource.TitleCallback">
            <summary>
            Specify a callback script to dynamically change the title of this Panel Source.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonTab">
            <summary>
            Extends RibbonTab to add visibility handling and maintain the user's 
            visibility selection explicitly.
            </summary>
        </member>
        <member name="F:WPFCustomControls.MaxRibbonTab.ActiveOnTabPropertyName">
            <summary>
            Name of ActiveOnTab property.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonTab.ShouldBeVisibleOnTab(Autodesk.Windows.RibbonTab)">
            <summary>
            Checks if, given a particular active tab, this tab should be made visible.
            </summary>
            <remarks>
            In particular, this method will check if this, as a merged-tab, should be shown
            given a on the passed in tab.
            </remarks>
            <param name="tab">The tab on which this tab should be shown.</param>
            <returns>false if this tab is merged but doesn't include the passed in tab as one of its
            tabs to merge against
            </returns>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.IsAvailable">
            <summary>
            This logically maps to the concept of availability in Max.  A component needs to be
            'available' to be visible, or toggleable from the Show Panel/Show Tab context menu.
            </summary>
            <remarks>
            In general this maps to !IsAnonymous, but there are cases where a component IsAvailable == true,
            but is IsAnonymous as well - such as when the component is in a floating frame.  The purpose of 
            the property is to separate the logical statement of availibility from the UI state IsAnonymous.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.Contextuality">
            <summary>
            Encapsulates logic around RibbonTab.IsContextual and RibbonTab.IsMergedContextual as a three-state
            enum, since that's basically what it is.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.ActiveOnTab">
            <summary>
            A comma-separated list of tab names on which a merged tab should be shown.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.ShouldSwitchToModifyPanel">
            <summary>
            If true, will open the Modify panel in the Command Panel 
            when this tab is activated.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.BecomeActiveOnVisible">
            <summary>
            If true, will use a 'stickiness' heurestic to become active when made visible.
            </summary>
            <remarks>
            For a tab that is marked BecomeActiveOnVisible == true, we make the 
            Active whenever we change the visibility of the tab to Visible.  However,
            if the user changes tabs while this tab is visible, we dismiss this
            'sticky' behaviour.  If the user returns to the tab, we restore it.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonTab.BecomeActiveStickiness">
            <summary>
            Whether the Become Active workflow for this tab is 'sticky' or not.
            </summary>
            <remarks>
            For a tab that is marked BecomeActiveOnVisible == true, we make the 
            Active whenever we change the visibility of the tab to Visible.  However,
            if the user changes tabs while this tab is visible, we dismiss this
            'sticky' behaviour.  If the user returns to the tab, we restore it.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.OpenPageCommand">
            <summary>
            Concrete ICommand to open apply the "Open" Windows ShellExecute verb to the 
            CommandParameter string.
            </summary>
            <remarks>
            If the CommandParameter is a web page, OpenPageCommand will open
            the given page in the user's default browser. You should probably 
            avoid using this command in publicly editable XAML, since the 
            CommandParameter may be changed to Open any arbitrary program.
            </remarks>
        </member>
        <member name="M:WPFCustomControls.OpenPageCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">The parameter provided to Execute.</param>
            <returns>True if the command can execute, false otherwise.</returns>
        </member>
        <member name="M:WPFCustomControls.OpenPageCommand.Execute(System.Object)">
            <summary>
            Runs the Windows "Open" ShellExecute verb on the given parameter.
            </summary>
            <param name="parameter">String to pass to ShellExecute's Open verb.</param>
        </member>
        <member name="E:WPFCustomControls.OpenPageCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:WPFCustomControls.RequeryableCommandAdapter">
            <summary>
            Intermediate abstract base class automatically requesting CanExecute 
            reevaluation when the CommandManager fires a RequerySuggested event.
            </summary>
            <remarks>
            <para>
            WPF Controls such as Buttons or MenuItems may only reevaluate their Command's
            CanExecute state upon receiving a CanExecuteChanged event. These Controls 
            use the CanExecute result to determine their own Enabled state. The WPF
            CommandManager uses the RequerySuggested event to request that ICommands
            reevaluate their execution conditions. Clients may force such a reevalation
            using CommandManager.InvalidateRequerySuggested.
            </para>
            <para>
            RoutedCommands listen to CommandManager.RequerySuggested by default, but 
            custom ICommands do not. This base class encapsulates the behavior required 
            to signal CanExecuteChanged when the CommandManager raises a 
            RequerySuggested event such that concrete classes may inherit and reuse
            this behavior.
            </para>
            </remarks>
        </member>
        <member name="M:WPFCustomControls.RequeryableCommandAdapter.#ctor">
            <summary>
            Construct this ICommand and register a CommandManager.RequerySuggested
            listener.
            </summary>
        </member>
        <member name="M:WPFCustomControls.RequeryableCommandAdapter.CanExecute(System.Object)">
            <summary>
            Determine if the conditions under which this ICommand can execute are 
            valid.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns>True if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:WPFCustomControls.RequeryableCommandAdapter.Execute(System.Object)">
            <summary>
            Execute this ICommand's operation.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:WPFCustomControls.RequeryableCommandAdapter.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises a CanExecuteChanged event.
            </summary>
            <param name="e">Information about the CanExecuteChanged event.</param>
        </member>
        <member name="E:WPFCustomControls.RequeryableCommandAdapter.CanExecuteChanged">
            <summary>
            Signals that the conditions under which this ICommand can execute have
            changed.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ReverseBinding">
            <summary>
            Creates a data binding from a DependencyObject's DependencyProperty to
            a CLR property on an Object.
            </summary>
            <remarks>
            <para>
            Regular Bindings only support DependencyObject DependencyProperties as their
            targets, and a given DependencyObject instance's property may only be the 
            Target of a single binding at a time.  Although Bindings support 
            BindingMode.OneWayToSource, the single Target restriction means that we 
            cannot use a OneWayToSource binding as the final link in a data binding 
            chain.
            </para>
            <para>
            ReverseBinding makes it possible to use a CLR property as a binding target
            by listening to value change events on the source
            DependencyObject's DependencyProperty and setting the resulting value on
            the CLR Object Property. Note that unlike WPF BindingExpressions, a
            ReverseBinding object uses full references to its source and target. This
            implies that clients must be more careful about managing the object lifecycle.
            </para>
            <para>
            A ReverseBinding will only establish the data binding after its properties
            have all been set and EstablishBinding is called.
            </para>
            </remarks>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.CreateReverseBinding(System.Windows.DependencyObject,System.String,System.Object,System.String)">
            <summary>
            Convenience method for completely setting up a ReverseBinding, setting
            all properties and calling EstablishBinding.
            </summary>
            <param name="source">Source object in the data binding.</param>
            <param name="sourceProperty">
            Name of the source property in the data binding. This must be a DependencyProperty.
            </param>
            <param name="target">Target object receiving the bound data.</param>
            <param name="targetProperty">Name of the target property receiving the bound data.</param>
            <returns>
            A new ReverseBinding configured with the given parameters, and established.
            </returns>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.CreateReverseBinding(System.Windows.DependencyObject,System.String,System.Object,System.String,System.Windows.Data.IValueConverter)">
            <summary>
            Convenience method for completely setting up a ReverseBinding, setting
            all properties and calling EstablishBinding.
            </summary>
            <param name="source">Source object in the data binding.</param>
            <param name="sourceProperty">
            Name of the source property in the data binding. This must be a DependencyProperty.
            </param>
            <param name="target">Target object receiving the bound data.</param>
            <param name="targetProperty">Name of the target property receiving the bound data.</param>
            <param name="converter">
            Converter used to modify the source value before applying it to the target.
            </param>
            <returns>
            A new ReverseBinding configured with the given parameters, and established.
            </returns>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.Dispose">
            <summary>
            Break this binding and release references.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.EstablishBinding">
            <summary>
            Establish the data binding, setting the current source value in the target
            object, and subscribing to value change events in order to update the
            target value as the source changes.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.BreakBinding">
            <summary>
            Remove the binding between the source and the target.  This binding will
            no longer respond to value changes on the source property.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.ResolveTargetByUid">
            <summary>
            Look up and set the Target Ribbon element identified by TargetUid.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ReverseBinding.Dispose(System.Boolean)">
            <summary>
            Break this binding and release references.
            </summary>
            <param name="disposing">This is an explicit call to Dispose()</param>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.Source">
            <summary>
            Source of the data binding.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.SourceProperty">
            <summary>
            Name of the source property on the source object of the data binding.
            Must be a DependencyProperty.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.Target">
            <summary>
            Target of the data binding.  This object will receive the source's 
            current value when the binding is established and will be updated when
            the source value changes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.TargetUid">
            <summary>
            Unique identifier for Ribbon element binding targets.
            </summary>
            <remarks>
            TargetUid serves primarily to support serialization of ReverseBindings.
            When constructing a ReverseBinding for a Ribbon element Target, the
            TargetUid may be used to identify the target element instead of setting
            the target object instance directly.  When the binding is established, 
            the ReverseBinding searches the Ribbon for its child element identified
            by this Uid.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.TargetProperty">
            <summary>
            Target property on the target object.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.Converter">
            <summary>
            Value converter applied between the Source value and the Target value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ReverseBinding.Key">
            <summary>
            Resource Key value, saved after deserializing a XAML file.
            </summary>
            <remarks>
            Preserving the Key allows us to spit out a XAML as unchanged when 
            serialized, then deserialized, and then serialized again.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.DoublePrecisionFormatter">
            <summary>
            Converts a value to floating point value with a specific precision, specified
            by the Precision property.  A precision of zero is an integer.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxColorSwatchUserControl">
            <summary>
            Interaction logic for MaxColorSwatchUserControl.xaml
            </summary>
            <summary>
            MaxColorSwatchUserControl
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxColorSwatchUserControl.HandleMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The main handler for when a user clicks on the WPF swatch object.
            </summary>
            <param name="sender">Standard for MouseUp</param>
            <param name="e">Standard for MouseUp</param>
        </member>
        <member name="F:WPFCustomControls.MaxColorSwatchUserControl.DefaultStartPosition">
            <summary>
            Default starting position of modal dialog, relative to application
            screen coordinates.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxColorSwatchUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonRadioButtonGroup">
            <summary>
            Specialized to allow for the setting of the current item based on a
            maxscript callback function.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonRadioButtonGroup.MaxscriptIndexCallback">
            <summary>
            A callback script that will be used to calculate the current list item.
            The script should return a one-based index.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonRadioButtonGroup.DesiredIndex">
            <summary>
            This is the desired index of the droplist
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxWpfRibbonSpinner">
            <summary>
            A WPF implementation of a Spinner Control data object for the ribbon.
            </summary>
            <remarks>
            This is actually the data representation of a spinner for ribbon.  The data representation
            (its template) is supplied by the MaxSpinnerUserControl class, and is associated in 
            Themes\Spinner.xaml
            </remarks>
        </member>
        <member name="T:WPFCustomControls.MaxWpfControlBase">
            <summary>
            The base class for Max-specific WPF-implemented ribbon controls.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.ExecuteValueRefresh">
            <summary>
            Runs the mechanism that refreshes this data structure, and calls the abstract
            method ValueRefresh(object)
            </summary>
        </member>
        <member name="F:WPFCustomControls.MaxWpfControlBase.IsEnabledMaxscriptFunctionName">
            <summary>
            The name of the function that is used on the MaxscriptCallback struct
            to evaluate if this control is enabled
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.HasProperty(System.String,System.String)">
            <summary>
            Evaluates whether the passed in struct has a given property (or function)
            </summary>
            <param name="aProperty">The name of the property.  This value should be unquoted.
            This value can also contain maxscript-legal wildcards.
            </param>
            <param name="aStruct">The name of the struct or object to evaluate.</param>
            <returns>true if maxscript finds a match for the literal or pattern</returns>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.ValueRefresh(System.String)">
            <summary>
            This method should be implemented by deriving classes in such a way that the class
            anticipates what the result of a script will be and processed it accordingly.
            </summary>
            <param name="script">
            A script, normally in the format: "MaxscriptCallback.GetValue()", unless the formatting
            string method GetValueFormatString() is overriden by the deriving class.
            </param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.RunValueChanged(System.Object)">
            <summary>
            Runs the mechanism that reports a value change on the data structure.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.ExecuteValueChanged(System.Object)">
            <summary>
            Template method called from RunValueChanged.  Override this method to supply custom
            value query mechanics, but always call RunValueChanged directly.
            </summary>
            <param name="newValue">The new value to push back to the model.</param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.ClearHasControllerValue">
            <summary>
            Call this if something about the script would result in us having
            to re-evaluate the Controller property.
            </summary>
        </member>
        <member name="F:WPFCustomControls.MaxWpfControlBase.ControllerFunctionString">
            <summary>
            The name of the property we check for a Controller declaration.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxWpfControlBase.HasKeyAtACurrentTime">
            <summary>
            Checks whether the control has an assigned key frame at the current time.
            </summary>
            <returns>True if a key frame exists at the current time.</returns>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.MaxscriptCallback">
            <summary>
            Callback struct that is used to query values for a control.  This struct
            should have control-specific callback functions.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.ShouldRefresh">
            <summary>
            This property roughly reflects the IsVisible WPF property of the templated control, and 
            can be used as a way of determining whether we should bother trying to 
            refresh this control.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.GetValueFormatString">
            <summary>
            The standard format string for extracting a the current value from the callback
            struct.
            Defaults to "{0}.GetValue()" where {0} is the name of the struct (MaxscriptCallback)
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.IsEnabledFormatString">
            <summary>
            The standard format string for extracting a the IsEnabled property from the struct.
            Defaults to "{0}.IsEnabled()" where {0} is the name of the struct (MaxscriptCallback)
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.HasIsEnabledFunctionDeclared">
            <summary>
            Internal cache value that is evaluated when MaxscriptCallback is set.  True
            if struct has a function called "IsEnabled"
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.MaxscriptPushEnabled">
            <summary>
            If this is false, then 'pushing' values back to maxscript is disabled.
            Used to 'set' a value on the ribbon side which was extracted from maxscript.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.OnChangedFormatString">
            <summary>
            The standard format string for reporting a value change to the callback
            struct.
            Defaults to "{0}.Onchanged({1})" where {0} is the name of the struct (MaxscriptCallback)
            and {1} is the new Value.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfControlBase.CheckForControllerString">
            <summary>
            The format string used to assemble the maxscript we use to check for a
            controller.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxWpfRibbonSpinner.RunButtonDown(System.Decimal)">
            <summary>
            Calls the maxscript callback function with a new value.  Normally, this
            is the beginning delimeter for an undoable action.  The newValue parameter is the
            current spinner Value.
            </summary>
            <param name="newValue">The current spinner Value.</param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfRibbonSpinner.RunButtonUp(System.Decimal)">
            <summary>
            Calls the maxscript callback function with a new value.  Normally, this
            is the ending delimeter for an undoable action.  The newValue parameter is the
            current spinner Value.
            </summary>
            <param name="newValue">The current spinner Value.</param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfRibbonSpinner.RunEditEnter(System.Decimal)">
            <summary>
            Called when the user types in a new value.  This should be called for a blunt Value
            change and represents a single undoable action.
            </summary>
            <param name="newValue">The current spinner Value.</param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfRibbonSpinner.ValueRefresh(System.String)">
            <summary>
            This is the overriden method that queries maxscript for the most current value.
            It calls the appropriate maxscript query method according to the spinner
            precision.
            </summary>
            <param name="script">The script that is used to run the query.</param>
        </member>
        <member name="M:WPFCustomControls.MaxWpfRibbonSpinner.AdjustPrecision">
            <summary>
            Calculates the precision of the spinner based on Scale property
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.Min">
            <summary>
            The minimum value for this spinner.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.Max">
            <summary>
            The maximum value for this spinner.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.Init">
            <summary>
            An initial value for this spinner.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.Scale">
            <summary>
            The scale determines the increment (per pixel) and precision of the
            spinner.  A Scale of 0.2 will show a Spinner with a precision of 1.
            A scale of 10 will show a Spinner with a precision of 0.  Any scale
            with decimal points will result in a float spinner, while an integer-based
            spinner will be considered an Int spinner.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.ShowTextBox">
            <summary>
            If this value is set to false, then only the spinner will be shown.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.CanSpin">
            <summary>
            If this value is false, the spinner cannot enter Spin mode, but can
            increment and decrement its value by clicking or holding the Up and
            Down arrows of the spinner or changing the text value.  This is a 
            useful setting for spinners that control parameters that can drastically
            affect scene complexity and redraw times.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.IsMouseCaptured">
            <summary>
            A property that tracks when the user is interacting with the spinner.  Used to
            delimit a click and hold interaction, for undo purposes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.RightClickOnSpinnerBehavior">
            <summary>
            Determines the behaviour of the spinner when the user right-clicks on it.
            The default behaviour is the same as all spinners in max - when you right-click
            on the spinner, it sets the minimize value.
            Other options include Maximize everywhere, and we can also split the spinner
            so that if a user right-clicks on the up arrow, it maximizes, and if the user
            right-clicks on the bottom arrow, it minimizes.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfRibbonSpinner.Value">
            <summary>
            The Spinner's current valid, committed Value.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonSplitButton">
            <summary>
            Specialized to allow for the setting of the current item based on a
            maxscript callback function.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonSplitButton.MaxscriptIndexCallback">
            <summary>
            A callback script that will be used to calculate the current list item.
            The script should return a one-based index.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonSplitButton.DesiredIndex">
            <summary>
            This is the desired index of the droplist
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxWpfColorSwatch">
            <summary>
            A WPF implementation of a Color Swatch for the Ribbon.
            </summary>
            <remarks>
            This is actually the data representation of a color swatch for ribbon.  The data representation
            (its template) is supplied by the MaxColorSwatchUserControl class, and is associated in 
            Themes\ColorSwatch.xaml
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxWpfColorSwatch.ColorValue">
            <summary>
            The current ColorValue of the swatch.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxWpfColorSwatch.ItemHeight">
            <summary>
            Sets the height of the Ribbon control representation.
            </summary>
            <remarks>
            This value should be used instead of the RibbonItem.Height value.  That
            value only works for resizable height controls (which are almost never used.)
            </remarks>
        </member>
        <member name="T:WPFCustomControls.PanelConfigurationEventArgs">
            <exclude />
        </member>
        <member name="M:WPFCustomControls.MaxActionItemCommand.ToString">
            <summary>
            Overidden to produce a XAML output representation using ActionItemExtension as a markup
            template.
            </summary>
            <returns>XAML representation of this object, using ActionItemExtension as a markup template.</returns>
            <seealso cref="T:WPFCustomControls.ActionItemExtension"/>
        </member>
        <member name="M:WPFCustomControls.MaxActionItemHostEventListener.ClearCache">
            <summary>
            The Synchronizer optimizes accesses to MaxActionItem.IsChecked and
            IsEnabled by caching the results.  This method flushes the cache.
            </summary>
            <remarks>
            This is a valid optimization.  Caching the results can reduce Maxscript
            access by about two-thirds in Max 2011 standard Ribbon configuration.
            </remarks>
        </member>
        <member name="E:WPFCustomControls.MaxGlobalRibbonCommandNotifier.MaxscriptExecuted">
            <summary>
            Occurs after a maxscript command has executed.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonControl">
            <exclude />
        </member>
        <member name="M:WPFCustomControls.MaxRibbonControl.InitializeToolTips(System.Object)">
            <summary>
            Recursively applies the default ribbon tooltip configuration to the
            given resource object and its children.
            </summary>
            <remarks>
            See InitializeRibbonItemToolTip for the default tooltip configuration.
            </remarks>
            <param name="target">
            Resource element, e.g. a RibbonItem, ResourceDictionary, or other XAML
            element, to which to apply the default tooltip configuration.
            </param>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonControl.InitializeRibbonItemToolTip(Autodesk.Windows.RibbonItem)">
            <summary>
            Set up the given RibbonItem's tooltip using the Ribbon tooltip
            configuration file and the item's id as the key within the tooltip 
            file.
            </summary>
            <remarks>
            <para>
            The item's tooltip will be assigned only if its ToolTip member is null.
            Therefore, the default ToolTip configuration can be overridden for a 
            specific item by providing a ToolTip definition in XAML.
            </para>
            <para>
            The ToolTip is specified using a UriKey pointing to the XAML file
            specified by ToolTipFilepath.  The item's Id value is used as the
            resource key within this XAML file. If the value does not exist
            in the passed in dictionary, the UriKey is not set.
            </para>
            </remarks>
            <param name="item">
            RibbonItem to configure.
            </param>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonControl.UpdateRibbonItemToolTip(Autodesk.Windows.RibbonItem)">
            <summary>
            Look up a new ToolTip for the given RibbonItem, overwriting any 
            current ToolTip.  The RibbonItem's Id is used to find the ToolTip
            in this MaxRibbonControl's ToolTipDictionary.
            </summary>
            <param name="item">Item to update</param>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonControl.RaiseActionItemButtonRefreshEvent">
            <summary>
            This is the main refresh entry point for the ribbon.  On each refresh, we a set 
            of actions to make sure everything is properly in synch.
            </summary>
        </member>
        <member name="M:WPFCustomControls.MaxRibbonControl.FindActionItemPanel(System.Int32)">
            <summary>
            Returns a collection of MaxModelingRibbonPanels panels that have a matching ActionItemIndex.
            </summary>
            <remarks>
            This is a wrapper collection of panels, not the source list.
            </remarks>
            <param name="index">An index to find matching panels for (based on ActionItemIndex property.)</param>
            <returns>A collection of panels </returns>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.ProcessedExtensionList">
            <summary>
            List of relative URIs to Ribbon Extension files included in this 
            Ribbon control.
            </summary>
            <remarks>
            This list enables us to avoid including an extension more than once.
            That could be problematic since a user could customize the conditions
            in his ribbon, then reload max and find that the original conditions
            had been restored through the ReverseBindings stored in it.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.ProcessedExtensionFiles">
            <summary>
            Serialized form of ProcessedExtensionList.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.IsLoading">
            <summary>
            Before toggling Ribbon orientation in load command, this property should be set to true to 
            disable the configuration saving. Otherwise it could cause side effects when the two Ribbons
            are of different minimize mode(#1240986).
            After toggling Ribbon orientation in load command, this property should be set to false to 
            re-enabling the configuration saving.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.SaveOnUnload">
            <summary>
            A property that determines whether this control should save itself on unload.  Defaults
            to true.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.AdjustingPanels">
            <summary>
            A variable indicating whether the ribbon is currently calculating
            panel visibility based on context.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxRibbonControl.SuspendUpdates">
            <summary>
            An internal variable used to track and prevent cascading updates.
            If this value is > 0, then updates are suspended on the ribbon.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxModelingRibbonPanel.ActionItemIndex">
            <summary>
            ActionItemIndex property is used to "bind" floating Ribbon panels to a certain
            action item. It is ranged from 1 to 20 for now, and maps to Ribbon Panel #1
            to Ribbon Panel #20 respectively.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxModelingRibbonPanel.PanelPriority">
            <summary>
            This property is no longer used.
            </summary>
        </member>
        <member name="P:WPFCustomControls.MaxModelingRibbonPanel.IsAvailable">
            <summary>
            This logically maps to the concept of availability in Max.  A component needs to be
            'available' to be visible, or toggleable from the Show Panel/Show Tab context menu.
            </summary>
            <remarks>
            In general this maps to !IsAnonymous, but there are cases where a component IsAvailable == true,
            but is IsAnonymous as well - such as when the component is in a floating frame.  The purpose of 
            the property is to separate the logical statement of availability from the UI state IsAnonymous.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.MaxModelingRibbonPanel.IsDirty">
            <exclude/>
            <summary>
            A 'dirty' flag for panels - internally kept to determine if the panel's 
            configuration state has changed at all.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxModelingRibbonPanel.ResolutionPriority">
            <summary>
            This enum is no longer used.
            </summary>
        </member>
        <member name="T:WPFCustomControls.MaxRibbonLabel">
            <exclude />
        </member>
        <member name="T:WPFCustomControls.ContextQueries.RibbonContextHelper">
            <summary>
            Utility methods for building ContextQueries and associating them with 
            Ribbon components.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ContextQueries.SoftSelectionEnabledContextQuery">
            <summary>
            Evaluates to true when the current object is in soft selection mode.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ContextQueries.SoftSelectionEnabledContextQuery.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ContextQueries.SoftSelectionEnabledContextQuery.Instance">
            <summary>
            The single, shared instance of this class.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ReverseBindingStorage">
            <summary>
            Stores ReverseBindings, keyed by their target object and target property 
            name.
            </summary>
            <remarks>
            There is no reliable way to have RibbonItems and RibbonPanels own ReverseBindings,
            so we use a Dictionary here to manage this ownership and association.  This keeps
            ReverseBindings from being cleaned up inadvertently, and allows us to retrieve
            existing bindings and ContextQueries.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.RibbonCustomControls.LaunchWorkspaceManagerCommand">
            <summary>
            Wrapper for launching the Workspace Manager
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.MaxRibbonRendererDropDown.ProductionRenderer">
            <summary>
            Represents the current Production renderer in max.
            </summary>
        </member>
        <member name="T:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown">
            <summary>
            Ribbon representation of the workspaces dropdown chooser
            </summary>
        </member>
        <member name="M:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.#ctor">
            <summary>
            contructor
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.WorkspacesPropertyName">
            <summary>
            Workspaces property name
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.CurrentWorkspacePropertyName">
            <summary>
            CurrentWorkspace property name
            </summary>
        </member>
        <member name="M:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.Dispose">
            <summary>
            For IDisposal interface.
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.UpdateWorkspacesSignal">
            <summary>
            A signal variable that gets tweaked to indicate that we should update 
            the workspaces list.
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.Workspaces">
            <summary>
            List of available Workpsaces
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.MaxRibbonWorkspacesDropDown.CurrentWorkspace">
            <summary>
            Currently selected Workspace.
            </summary>
        </member>
        <member name="T:WPFCustomControls.RibbonCustomControls.RendererDropDown">
            <summary>
            Interaction logic for RendererDropDown.xaml
            </summary>
            <summary>
            RendererDropDown
            </summary>
        </member>
        <member name="M:WPFCustomControls.RibbonCustomControls.RendererDropDown.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WPFCustomControls.RibbonCustomControls.SampleWorkspaceData">
            <summary>
            Sample design-time data for the workspace dropdown
            </summary>
        </member>
        <member name="T:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown">
            <summary>
            Interaction logic for WorkspacesDropDown.xaml
            </summary>
            <summary>
            WorkspacesDropDown
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.ItemsProperty">
            <summary>
            Items property
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.CurrentWorkspaceProperty">
            <summary>
            CurrentWorkspace property
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.UpdateSourceSignalProperty">
            <summary>
            UpdateSourceSignal property
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.LaunchManagerCommandProperty">
            <summary>
            LaunchManagerCommand Dependency Property
            </summary>
        </member>
        <member name="F:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.ResetWorkspaceCommandProperty">
            <summary>
            ResetWorkspaceCommand Dependency Property
            </summary>
        </member>
        <member name="M:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.Items">
            <summary>
            List of Workspaces to be bound to the dropdown
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.CurrentWorkspace">
            <summary>
            Currently selected workspace item
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.UpdateSourceSignal">
            <summary>
            Used a way of signaling that the source of workspaces should be updated
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.LaunchManagerCommand">
            <summary>
            Command for launching Workspace Manager
            </summary>
        </member>
        <member name="P:WPFCustomControls.RibbonCustomControls.WorkspacesDropDown.ResetWorkspaceCommand">
            <summary>
            Command for resetting a workspace
            </summary>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.BuildUidMap(System.Object)">
            <summary>
            Build a dictionary mapping guids to tree items.
            </summary>
            <param name="root">Root element from which to descend.</param>
            <returns>The built dictionary.</returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FindByUid(System.Object,System.String)">
            <summary>
            Recursively search Ribbon elements for the IRibbonContentUid instance 
            identified by the given Uid.
            </summary>
            <param name="root">Root of the search tree.</param>
            <param name="uid">Identifier to find in the search tree.</param>
            <returns>The found object or null.</returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.ApplyUids(System.Object)">
            <summary>
            Recursively generate Uids for the given Ribbon element and its descendants.
            Any IRibbonContentUid instances without a current UID value will be assigned
            a new Uid. Uid collisions will be corrected.
            </summary>
            <param name="root">The root of the Ribbon element tree to process.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.ClearUids(System.Object)">
            <summary>
            Recursively clear all the Uids in the given Ribbon element and its 
            descendants.
            </summary>
            <param name="root">The root of the Ribbon element tree to process.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FixRibbonImageSource(System.Object)">
            <summary>
            Hackery at its finest.  I have to correct and replace RibbonImageSources that refer to pngs since they
            don't load them properly.
            </summary>
            <remarks>Airlook Hack</remarks>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FindReverseBindings(System.Object,WPFCustomControls.ReverseBindingStorage)">
            <summary>
            Find all ReverseBindings targeting the passed in tree root or any of its
            descendants.
            </summary>
            <param name="root">Root of the content tree to examine.</param>
            <param name="bindingStorage">Storage to search for relevant ReverseBindings.</param>
            <returns>
            Collection of all ReverseBindings from the given storage targeting any 
            member of the given tree.
            </returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.ExportTabByName(System.String,System.String)">
            <summary>
            Write a RibbonTab out to a file in a format suitable for inclusion in the
            Ribbon as an Extension.
            </summary>
            <param name="tabName">Tab to find in the Ribbon</param>
            <param name="outputPath">
            Where to save the file. If given a relative path, the output file will
            be placed in the Ribbon's Extensions folder. A .xaml extension will
            be appended if not present.
            </param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.CopyTree(System.ICloneable,WPFCustomControls.ReverseBindingStorage)">
            <summary>
            Copy the content tree below root, returning the root of the new tree.
            </summary>
            <param name="root">The root of the Ribbon element tree to copy.</param>
            <param name="storage">Current storage for active ReverseBindings.</param>
            <returns>The root of the new cloned tree.</returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.AssignIds(System.Object)">
            <summary>
            Runs through the sub-tree provided, and assigns IDs to the Id field of
            RibbonItems according to the prescribed criteria.
            </summary>
            <remarks>
            For internal use.
            </remarks>
            <param name="obj">The head of a tree of objects which contains some combination of RibbonItems.
            (i.e.  The RibbonControl object.)
            </param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.AssignIdToRibbonItem(System.Object)">
            <summary>
            Given some object, will assign an ID to the Id field if it is a RibbonItem
            of some kind.  The details of this assignment are internal, and are for internal use.
            </summary>
            <param name="item">An object to assign an ID to, if appropriate.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.AssignIcons(System.Object)">
            <summary>
            Forces the assignments of default icons on all items under the root tree element.
            </summary>
            <param name="obj">Usually the ribbon control.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.ProduceUniqueActionId(ManagedServices.MaxActionItem)">
            <summary>
            Produces an Id that uniquely defines a MaxActionItem.
            </summary>
            <param name="action">An application action to derive an Id from.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FixClone(System.Object)">
            <summary>
            Fixes the clone of some ribbon items, like RibbonListButton.
            </summary>
            <param name="obj">A ribbon item to fix, if it needs fixing.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FixPanelReferences(System.Object,WPFCustomControls.ReverseBindingStorage,Autodesk.Windows.RibbonPanel)">
            <summary>
            Force all RibbonPanelContextQuery instances bound to the given root's
            descendants to reference the given correct panel.
            </summary>
            <param name="root">Root of the content tree to visit.</param>
            <param name="storage">Source for current ReverseBindings.</param>
            <param name="correctPanel">Replacement panel for all references in bound
            RibbonPanelContextQuery instances.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.RemapPanelReferences(System.Object,WPFCustomControls.ReverseBindingStorage,Autodesk.Windows.RibbonPanel,Autodesk.Windows.RibbonPanel)">
            <summary>
            Traverse down the content tree rooted at root, changing any associated
            RibbonPanelContextQuery panels from fromPanel to toPanel.
            </summary>
            <param name="root">Root of the subtree to process.</param>
            <param name="storage">
            ReverseBindingStorage used to find associated ContextQueries.
            </param>
            <param name="fromPanel">Panel to find and replace.</param>
            <param name="toPanel">Panel to use instead of fromPanel.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FlattenTree(System.Object)">
            <summary>
            Flatten a content tree into a list using a depth-first traversal.
            </summary>
            <param name="root">The root of the Ribbon element tree to process.</param>
            <returns>The new flat list or ribbon elements.</returns>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.RemapClonedPanelReferences(WPFCustomControls.ContextQueries.MultiContextQuery,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>
            Change RibbonPanelContextQuery.Panel references in the given ContextQuery 
            tree to point to their corresponding cloned instances.
            </summary>
            <param name="rootQuery">
            The root of the Ribbon element tree to process.
            </param>
            <param name="flatOriginalTree">
            List of the original tree's elements in depth-first order.
            </param>
            <param name="flatNewTree">
            List of the new cloned tree's elements in depth-first order.
            </param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.RemapPanelReferences(WPFCustomControls.ContextQueries.MultiContextQuery,Autodesk.Windows.RibbonPanel,Autodesk.Windows.RibbonPanel)">
            <summary>
            Descend through the given query tree, replacing any references to fromPanel
            with references to toPanel.
            </summary>
            <param name="rootQuery">Root of the query tree/</param>
            <param name="fromPanel">Panel to replace.</param>
            <param name="toPanel">Replacement panel.</param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.FixPanelReferences(WPFCustomControls.ContextQueries.MultiContextQuery,Autodesk.Windows.RibbonPanel)">
            <summary>
            Force all panel references in queries below the given root to reference
            the given panel.
            </summary>
            <param name="rootQuery">
            Root from which to begin searching for RibbonPanelContextQuery children.
            </param>
            <param name="correctPanel">
            Correct panel to apply in RibbonPanelContextQuery references.
            </param>
        </member>
        <member name="M:WPFCustomControls.RibbonUtilities.VisitContentTree(System.Object,WPFCustomControls.RibbonUtilities.Visitor)">
            <summary>
            Implements a depth first traversal, running the given visitor delegate
            on each element.  Returns early with the visitor's return value, in
            order to serve as a search.
            </summary>
            <param name="root">Root element at which to begin the depth-first traversal</param>
            <param name="visitor">Visitor delegate to execute on each element</param>
            <returns>null or the found item if visitor defines a search</returns>
        </member>
        <member name="T:WPFCustomControls.TransparentSlider">
            <exclude />
            <summary>
            Proof of concept for a control that goes semi-transparent when interacted with.
            </summary>
            <summary>
            TransparentSlider
            </summary>
        </member>
        <member name="M:WPFCustomControls.TransparentSlider.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WPFCustomControls.ActionItemApplicationMenuItem">
            <exclude/>
            <summary>
            Specialized Application Menu Item class launching native Max Action Items.
            Menu Item properties not overridden in XAML are overwritten by the 
            Action Item's menu properties.
            </summary>
        </member>
        <member name="M:WPFCustomControls.ActionItemApplicationMenuItem.UpdateMenuItemProperties">
            <summary>
            Refresh the menu item's display properties from the ActionItem's 
            settings.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemApplicationMenuItem.CommandHandler">
            <exclude/>
            <summary>
            Hides the base CommandHandler to restrict the type to 
            MaxActionItemCommand.
            </summary>
        </member>
        <member name="P:WPFCustomControls.ActionItemApplicationMenuItem.ActionItem">
            <summary>
            Convenience accessor for the CommandHandler's internal ActionItem.
            </summary>
        </member>
        <member name="T:WPFCustomControls.Converters.VisibilityConverter">
            <summary>  
            Converts between boolean values and the Visibility enum.
            </summary>  
            <remarks>
            <para>
            By default, the VisibilityConverter converts from a true boolean value to 
            Visibility.Visible, and from false to Visibility.Collapsed. To convert false to
            Visibility.Hidden, specify Visibility.Hidden as the Binding ConverterParameter.
            </para>
            <para>
            The easiest way to use the VisibilityConverter in XAML is as a markup extension
            (assuming xmlns:c="clr-namespace:WPFCustomControls.Converters;assembly=WPFCustomControls").
            <code>
            &lt;Element Value="{Binding Path=SomePath, Converter={c:VisiblityConverter}&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:WPFCustomControls.Converters.VisibilityConverter.Converter">
            <summary>
            Default, reusable instance of this converter.
            </summary>
        </member>
        <member name="M:WPFCustomControls.Converters.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from a boolean to a Visibility enum value.
            </summary>
            <remarks>
            By default, the VisibilityConverter converts from a true boolean value to 
            Visibility.Visible, and from false to Visibility.Collapsed. To convert false to
            Visibility.Hidden, specify Visibility.Hidden as the parameter.
            </remarks>
            <param name="value">bool value</param>
            <param name="targetType">ignored</param>
            <param name="parameter">If not null, parameter is returned if value is false.</param>
            <param name="culture">ignored</param>
            <returns>
            <list>
            <item>Visibility.Visible if value is true.</item>
            <item>parameter if parameter is not null and value is false.</item>
            <item>Visibility.Collapsed if parameter is null and value is false.</item>
            </list>
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from Visibility to bool.
            </summary>
            <remarks>
            Converts from Visibility.Visible to true, and from anything else to false.
            </remarks>
            <param name="value">Visibility value</param>
            <param name="targetType">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>
            true if value is Visibilty.Visible, false otherwise.
            </returns>
        </member>
        <member name="M:WPFCustomControls.Converters.VisibilityConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Implements MarkupExtension to return VisibilityConverter.Converter.
            </summary>
            <param name="serviceProvider">ignored</param>
            <returns>VisibilityConverter.Converter</returns>
        </member>
        <member name="T:WPFCustomControls.Customization.WidgetsSelector">
            <summary>
            Interaction logic for WidgetsSelector.xaml
            </summary>
            <summary>
            WidgetsSelector
            </summary>
        </member>
        <member name="M:WPFCustomControls.Customization.WidgetsSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:WPFCustomControls.UIElementAdorner">
            <summary>
            General concrete Adorner class, displaying any UIElement as an Adorner.
            </summary>
            <remarks>
            This adorner gets its display characteristics from the AdornerElement.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.ValidationRules.DoubleValidationRule">
            <summary>
            Validates that a given text input is a valid floating-point number format.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ValidationRules.IntegerValidationRule">
            <summary>
            Validates that a given text input is a valid integer format.
            </summary>
        </member>
        <member name="T:WPFCustomControls.ViewportContainer">
            <summary>
            Root container for holding 3ds Max Viewport content.
            </summary>
            <remarks>
            Currently this doesn't do much, but the idea behind this class is that we
            could eventually customize the container to provide a universal control scheme
            to managed controls that we want to expose to the Viewport.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.WindowBoundsMemento">
            <summary>
            Stores a Window's size and location during the current session.
            </summary>
            <remarks>
            To use this memento:
            <list type="number">
            <item>Maintain a memento instance beyond the lifetime of
            the window it manages, such as by keeping a static memento in the window 
            class.</item>
            <item>Set up default values in the Window's constructor or XAML.</item>
            <item>Call WindowBoundsMemento.ManageWindow, passing in the Window.</item>
            </list>
            </remarks>
        </member>
        <member name="T:WPFCustomControls.WpfSpinner">
            <summary>
            Interaction logic for WpfSpinner.xaml
            </summary>
            <remarks>
            This class contains the logic and internal state for the spinner aspect
            of the MaxSpinnnerUserControl.  
            </remarks>
            <summary>
            WpfSpinner
            </summary>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.ValueCoerceValueCallback(System.Windows.DependencyObject,System.Object)">
            <summary>
            This coercion method ensures that the spinner values never exceed the limits
            set by the Min and Max values
            </summary>
            <param name="obj">The Spinner.</param>
            <param name="value">The value to coerce.</param>
            <returns></returns>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.EnterSpinMode">
            <summary>
            Places the spinner in Spin Mode, where the mouse cursor is captured, the cursor is
            modified to reflect the spin mode, and scrubbing North-South causes the Value
            property to be appropriately modified according to the current Scale value.
            </summary>
            <remarks>
             This function is normally internal, but could be triggered programmatically.
            </remarks>
            <seealso cref="M:WPFCustomControls.WpfSpinner.ExitSpinMode"/>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.ExitSpinMode">
            <summary>
            Exits the Spin mode.
            </summary>
            <remarks>
             This function is normally internal, but could be triggered programmatically.
            </remarks>
            <seealso cref="M:WPFCustomControls.WpfSpinner.EnterSpinMode"/>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.Increment">
            <summary>
            Increments the spinner value.  This value change is still
            coerced to remain with Min and Max values, as usual.
            </summary>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.Decrement">
            <summary>
            Decrements the spinner value.  This value change is still
            coerced to remain with Min and Max values, as usual.
            </summary>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.HandleKeyboardInput(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles keyboard input for the textbox.  
            </summary>
            <param name="sender">Standard for KeyUp</param>
            <param name="e">Standard for KeyUp</param>
        </member>
        <member name="M:WPFCustomControls.WpfSpinner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.Min">
            <summary>
            The minimum value of the spinner.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.Max">
            <summary>
            The maximum value of the spinner.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.Scale">
            <summary>
            The scale determines the increment (per pixel) and precision of the
            spinner.  A Scale of 0.2 will show a Spinner with a precision of 1.
            A scale of 10 will show a Spinner with a precision of 0.  Any scale
            with decimal points will result in a float spinner, while an integer-based
            spinner will be considered an Int spinner.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.CanSpin">
            <summary>
            If this value is false, the spinner cannot enter Spin mode, but can
            increment and decrement its value by clicking or holding the Up and
            Down arrows of the spinner or changing the text value.  This is a 
            useful setting for spinners that control parameters that can drastically
            affect scene complexity and redraw times.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.RightClickOnSpinnerBehavior">
            <summary>
            Determines the behaviour of the spinner when the user right-clicks on it.
            The default behaviour is the same as all spinners in max - when you right-click
            on the spinner, it sets the minimize value.
            Other options include Maximize everywhere, and we can also split the spinner
            so that if a user right-clicks on the up arrow, it maximizes, and if the user
            right-clicks on the bottom arrow, it minimizes.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.Value">
            <summary>
            The currently commited spinner value.  This is the final value kept
            after a user has adjusted the selection on the control.
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.InternalSpinningValue">
            <summary>
            This is the internal buffered Spinning Value - we need to track changes in this
            value, since SpinningValue will be coerced to stay within Min and Max limits
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.OriginalValue">
            <summary>
            The original value of a spinner captured at left mouse down
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.IsCapturing">
            <summary>
            Used to determine if the spinner is in a Spinning state.
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.IsSpinning">
            <summary>
            Used to determine if the spinner is in a Spinning state.
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.IsShowingEditBox">
            <summary>
            If this property is false, then edit text box is not shown.
            </summary>
            <remarks>
            This is a Dependency Property.
            </remarks>
        </member>
        <member name="T:WPFCustomControls.WpfSpinner.RedBorderAdorner">
            <summary>
            Takes care of bracketing the spinner, regardless of its current size.
            </summary>
        </member>
        <member name="P:WPFCustomControls.WpfSpinner.RedBorderAdorner.BracketLength">
            <summary>
            The length of one segment of the bracket, along one edge.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
